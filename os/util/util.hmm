/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer
 *
 * Copyright (C) 2008-2022 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * util/util.hmm : util.cmm の外部インターフェイス
 *
 * 2022.07.08 : _readMap,_writeMap 追加
 * 2021.10.15 : _div32 削除
 * 2020.08.23 : crt0.hmm を取り込む（crt0.hmmは廃止）
 * 2020.08.16 : 各関数の使用方法を記述したコメントを追加
 * 2019.09.25 : unputBuf() 追加
 * 2018.11.30 : putCh(),putStr() 削除（デバッグ専用のプライベートな関数に変更）
 * 2018.11.12 : 隅田の成果を取り込む（リングバッファ関連）
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2016.01.19 : WordLE を wordLE に変更
 * 2016.01.18 : WordBE と stWordBE を削除
 * 2016.01.11 : 一部の関数をキャメルケースに統一
 * 2016.01.05 : isUpper, isLower, isDigit, isPrint をマクロに変更
 * 2015.12.21 : _uCmp32() を追加
 * 2015.12.14 : strncpy() を dirAccess に移植
 * 2015.09.07 : strlen(), strcpy() を追加, MEM 配列を復活(重村)
 * 2015.08.19 : ワード処理ルーチンを移植
 * 2014.05.07 : 村田開発開始
 * 2013.01.06 : MEM を削除
 * 2012.12.27 : isUpper, isLower, isDigit, isPrint を追加
 * 2012.03.02 : crt0.h を分離
 * 2012.03.02 : TeC7 用に書き換える
 * 2011.05.26 : TaC-OS に不要なものを削除
 * 2011.05.23 : MEM 配列を追加
 * 2011.05.12 : panic 関数を追加
 * 2010.07.20 : Subversion による管理を開始
 * 2010.03.12 : public 修飾子を追加
 * 2009.11.05 : バイト配列関係の関数を追加
 * 2009.11.05 : Kernel 用と Boot 用をマージしなおす
 * 2009.04.16 : Boot 用に書き換え
 * 2008.08    : Kernel 用の初期バージョン
 *
 *
 * util/crt0.hmm :crt0.s の外部インターフェイス
 *
 * 2020.08.16 : 各関数の使用方法を記述したコメントを追加
 * 2019.12.27 : 論理アドレスから物理アドレスの変換 _ItoP(), _AtoP() 追加
 * 2019.01.27 : I/O特権モード追加
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2016.01.20 : _fp() を追加
 * 2016.01.19 : Ld32 と St32 を ld32 と st32 に変更
 * 2015.12.30 : St32 追加(重村)
 * 2015.09.02 : __AtoA 追加(重村)
 * 2014.05.07 : 村田開発開始
 * 2013.01.08 : ENINT, PRVLG 追加
 * 2012.12.26 : halt() 追加
 * 2012.09.20 : TaC-CPU V2 対応
 * 2012.03.02 : util.h から分離、新規作成
 *
 * $Id$
 */

#include <process.hmm>

//*****************************************************************************
// 特権命令など:
//   TaCの特殊な命令を呼び出す関数
//*****************************************************************************

/*-----------------------------------------------------------------------------
 *   名前    : setPri
 *   戻り値  : 操作前のflagレジスタの値
 *   引数    : flagにセットする値
 *   解説    : CPUのflagレジスタに値をセットする
 */
#define EI   0x0080                                 // 割込み許可
#define DI   0x0000                                 // 割込み不許可
#define KERN 0x0040                                 // カーネルモード
#define IPRV 0x0020                                 // I/O特権モード
#define USER 0x0000                                 // ユーザモード
public int setPri(int l);

/*-----------------------------------------------------------------------------
 *   名前    : in
 *   戻り値  : 入力した値
 *   引数    : int p  ポートのI/Oアドレス
 *   解説    : 16bit データをI/Oポートから入力する
 */
public int in(int p);

/*-----------------------------------------------------------------------------
 *   名前    : out
 *   戻り値  : なし
 *   引数    : int p  ポートのI/Oアドレス
 *             int v  出力する16bitデータ
 *   解説    : 16bit データをI/Oポートへ出力する
 */
public void out(int p, int v);

/*-----------------------------------------------------------------------------
 *   名前    : halt
 *   戻り値  : なし
 *   引数    : なし
 *   解説    : CPUを停止する（RUN を押しても再開しない）
 */
public void halt();

/*-----------------------------------------------------------------------------
 *   名前    : pause
 *   戻り値  : なし
 *   引数    : なし
 *   解説    : CPUを停止する（RUN を押すと戻ってくる）
 */
public void pause();

/*-----------------------------------------------------------------------------
 *   名前    : _fp
 *   戻り値  : FPの値
 *   引数    : なし
 *   解説    : CPUのFPレジスタの値を返す
 */
public int _fp();

//*****************************************************************************
// C-- サポート関数:
//   C-- に不足している機能を補う関数
//*****************************************************************************

/*-----------------------------------------------------------------------------
 *   名前    : _AtoI
 *   戻り値  : アドレスと同じ整数値
 *   引数    : アドレス
 *   解説    : C--の参照型を整数型に型変換する
 */
public int    _AtoI(void[] a);

/*-----------------------------------------------------------------------------
 *   名前    : _AtoA
 *   戻り値  : アドレス
 *   引数    : アドレス
 *   解説    : C--の参照型を参照型に型変換する
 */
public void[] _AtoA(void[] a);

/*-----------------------------------------------------------------------------
 *   名前    : _ItoA
 *   戻り値  : 整数値と同じアドレス
 *   引数    : 整数値
 *   解説    : C--の整数型を参照型に型変換する
 */
public void[] _ItoA(int a);

/*-----------------------------------------------------------------------------
 *   名前    : _addrAdd
 *   戻り値  : アドレス
 *   引数    : void[] a  アドレス
 *             int i     整数
 *   解説    : アドレスに整数を足して返す
 */
public void[] _addrAdd(void[] a, int i);

/*-----------------------------------------------------------------------------
 *   名前    : _uComp
 *   戻り値  : 大小比較の結果（1:>, 0:=, -1:<）
 *   引数    : int a, b  整数
 *   解説    : a, b を符号なし整数とみなして大小比較する
 */
public int    _uCmp(int a, int b);

/*-----------------------------------------------------------------------------
 *   名前    : _aComp
 *   戻り値  : 大小比較の結果（1:>, 0:=, -1:<）
 *   引数    : void[] a, b  アドレス
 *   解説    : a, b アドレスの大小比較をする
 */
public int    _aCmp(void[] a, void[] b);            // アドレスの大小比較

/*-----------------------------------------------------------------------------
 *   名前    : _args
 *   戻り値  : _argsを呼び出した関数の第２引数のアドレス
 *   引数    : なし
 *   解説    : printfのような可変引数の関数が使用する．
 *             int a = args();
 *             a[0]が第２引数，a[1]が第３引数．．．
 */
public void[] _args();

//*****************************************************************************
// 32bit 演算ルーチン：
//   32bit データは大きさ 2 の int 配列で表現する．
//   int[] dst が 32bit データを表現するとき，
//   dst[0]:上位16bit, dst[1]:下位16bitとなる．
//*****************************************************************************

/*-----------------------------------------------------------------------------
 *   名前    : _add32
 *   戻り値  : dstと同じアドレス
 *   引数    : int[] dst  32bit データ
 *             int[] src  32bit データ
 *   解説    : 32bit データ dst と src の和を計算する．（dst <- dst + src）
  */
public int[]  _add32(int[] dst, int[] src);

/*-----------------------------------------------------------------------------
 *   名前    : _sub32
 *   戻り値  : dstと同じアドレス
 *   引数    : int[] dst  32bit データ
 *             int[] src  32bit データ
 *   解説    : 32bit データ dst と src の差を計算する．（dst <- dst - src）
 */
public int[]  _sub32(int[] dst, int[] src);

/*-----------------------------------------------------------------------------
 *   名前    : _mul32
 *   戻り値  : dstと同じアドレス
 *   引数    : int[] dst  32bitデータ
 *             int src    16bitデータ
 *   解説    : 32bit データ dst と 16bit データ src の積を計算する．
 *             (dst <- dst * src)
 */
public int[]  _mul32(int[] dst, int src);

/*-----------------------------------------------------------------------------
 *   名前    : _ld32（マクロ）
 *   引数    : int[] dst  32bit データ
 *             int ｈ     16bit データ
 *             int l      16bit データ
 *   解説    : ２つの 16bit データから一つの 32bit データを作る
 *             dst[0] <- h
 *             dst[1] <- l
 */
#define ld32(dst,h,l) ((dst)[0]=(h),(dst)[1]=(l))   // 32bit のデータのロード

/*-----------------------------------------------------------------------------
 *   名前    : _st32（マクロ）
 *   引数    : int ｈ     16bit データ
 *             int l      16bit データ
 *             int[] src  32bit データ
 *   解説    : 32bit データを２つの 16bit データにストアする
 *             h <- dst[0]
 *             l <- dst[1]
 */
#define st32(h,l,src) ((h)=(src)[0],(l)=(src)[1])   // 32bit のデータのストア

//*****************************************************************************
// ビットマップ読み書きルーチン
// ビットマップの指定ビットに読み書きの処理を行う
//*****************************************************************************

/*-----------------------------------------------------------------------------
 *   名前    : _readMap
 *   戻り値  : 引数で指定したビットの値
 *   引数    : int adr         ビットマップのアドレス
 *             int bitnum      ビットの番号
 *   解説    : 指定したアドレスの指定したビットを読み込み、そのビットが0か1かを返す
 *            
 */
public void _readMap(int adr, int bitnum)

/*-----------------------------------------------------------------------------
 *   名前    : _writeMap
 *   引数    : int adr       ビットマップのアドレス
 *             int bitnum   ビットの番号
 *             int data     書き込みたい値
 *   解説    : ビットマップの指定したビットに0又は1を書き込む
 *            
 */
public void _writeMap(int adr, int bitnum, int data)

//*****************************************************************************
// 仮想アドレス，物理アドレス変換:
//   ユーザプロセスの仮想アドレスから，物理アドレスを計算する
//*****************************************************************************

/*-----------------------------------------------------------------------------
 *   名前    : _ItoP
 *   戻り値  : 物理アドレス
 *   引数    : int a 論理アドレス
 *             PCB pcb プロセス
 *   解説    : プロセスの論理アドレス(整数)を物理アドレスに変換する
 */
public void[] _ItoP(int a, PCB pcb);                // 論理=>物理アドレス変換

/*-----------------------------------------------------------------------------
 *   名前    : _AtoP
 *   戻り値  : 物理アドレス
 *   引数    : void[] a 論理アドレス
 *             PCB pcb プロセス
 *   解説    : プロセスの論理アドレスを物理アドレスに変換する
 */
public void[] _AtoP(void[] a, PCB pcb);             // 論理=>物理アドレス変換

// グローバル変数
public int _memSiz;                                 // 主記憶のサイズ
public char[] MEM;       // 主記憶を意味する配列 utilInit() で 0x0000 に初期化
public void utilInit();

/*-----------------------------------------------------------------------------
 *   名前    : _uCmp32
 *   戻り値  : 大小比較の結果（1:>, 0:=, -1:<）
 *   引数    : int[] a, b  32bit データ
 *   解説    : a, b を符号なし32bit データとして大小比較する
 */
public int _uCmp32(int[] a, int[] b);

/*-----------------------------------------------------------------------------
 *   名前    : toUpper
 *   戻り値  : 変換結果
 *   引数    : c 文字
 *   解説    : 引数の文字が英字アルファベット小文字なら大文字に変換して返す
 *             英字アルファベット以外ならそのまま返す
 */
public char toUpper(char c);

/*-----------------------------------------------------------------------------
 *   名前    : isDigit（マクロ）
 *   戻り値  : 判定結果（boolean型）
 *   引数    : c 文字
 *   解説    : 引数の文字が数字なら ture，そうでなければ false を返す
 */
#define isDigit(c) (ord('0')<=ord(c) && ord(c)<=ord('9'))

/*-----------------------------------------------------------------------------
 *   名前    : isLower（マクロ）
 *   戻り値  : 判定結果（boolean型）
 *   引数    : c 文字
 *   解説    : 引数の文字が英字アルファベット小文字なら ture，
 *             そうでなければ false を返す
 */
#define isLower(c) (ord('a')<=ord(c) && ord(c)<=ord('z'))

/*-----------------------------------------------------------------------------
 *   名前    : isUpper（マクロ）
 *   戻り値  : 判定結果（boolean型）
 *   引数    : c 文字
 *   解説    : 引数の文字が英字アルファベット大文字なら ture，
 *             そうでなければ false を返す
 */
#define isUpper(c) (ord('A')<=ord(c) && ord(c)<=ord('Z'))

/*-----------------------------------------------------------------------------
 *   名前    : isPrint（マクロ）
 *   戻り値  : 判定結果（boolean型）
 *   引数    : c 文字
 *   解説    : 引数の文字が ASCII コードの印刷可能文字なら ture，
 *             そうでなければ false を返す
 */
#define isPrint(c) (0x20<=ord(c) && ord(c)<=0x7e)

/*-----------------------------------------------------------------------------
 *   名前    : strLen
 *   戻り値  : 文字列の長さ
 *   引数    : char[] s 文字列を格納した配列
 *   解説    : s の長さをバイト単位で返す
 */
public int strLen(char[] s);

/*-----------------------------------------------------------------------------
 *   名前    : strCpy
 *   戻り値  : dst と同じアドレス
 *   引数    : char[] dst  コピー先配列
 *             char[] src  コピー元文字列
 *   解説    : src に格納されたC--文字列を dst にコピーする
 */
public char[] strCpy(char[] dst, char[] src);

/*-----------------------------------------------------------------------------
 *   名前    : strRchr
 *   戻り値  : 文字 c が最後に出現した位置(<0:出現しなかった)
 *   引数    : char[] s  探索対象文字列
 *             char c    探索する文字
 *   解説    : 文字列 s で，c が最後に出現した位置を添え字で返す．
 *             見つからなかった場合は -1 を返す
 */
public int strRchr(char[] s, char c);

/*-----------------------------------------------------------------------------
 *   名前    : wordLE（マクロ）
 *   戻り値  : ワード（16bit）データ
 *   引数    : char[] b  バイト配列（char配列）
 *             int i     ワード位置
 *   解説    : バイト配列 b の第 i バイトから格納されている
 *             リトルエンディアンのワードデータを取り出す
 *             (FAT ファイルシステムから読み込んだものがリトルエンディアン)
 */
#define wordLE(b, i) ((ord((b)[(i)+1])<<8) | ord((b)[i]))

/*-----------------------------------------------------------------------------
 *   名前    : stWordLE（マクロ）
 *   戻り値  : なし
 *   引数    : char[] b  バイト配列（char配列）
 *             int i     ワード位置
 *             int s     ワード（16bit）データ
 *   解説    : バイト配列 b の第 i バイトに
 *             リトルエンディアンのワードデータを書き込む
 *             (FAT ファイルシステムにはリトルエンディアンで書き込む)
 */
#define stWordLE(b,i,s) {(b)[i]=chr(s); b[(i)+1]=chr((s)>>8);}

// リングバッファ関係
/*-----------------------------------------------------------------------------
 *   名前    : リングバッファ（構造体）
 *   解説    : 文字型の FIFO データ構造
 */
struct RingBuf {
  char[] buf;                                 // バッファ
  int    size;                                // バッファサイズ
  int    head, tail, cnt;                     // ポインタ
};

/*-----------------------------------------------------------------------------
 *   名前    : putBuf
 *   戻り値  : ture: 正常， false: バッファがパンク
 *   引数    : RingBuf buf  リングバッファ構造体
 *             char c       追加する文字
 *   解説    : リングバッファ（FIFO）に１文字追加する
 */
public boolean putBuf(RingBuf buf, char c);

/*-----------------------------------------------------------------------------
 *   名前    : getBuf
 *   戻り値  : 取り出した文字（バッファが空の場合は'\0'を返す）
 *   引数    : RingBuf buf  リングバッファ構造体
 *   解説    : リングバッファ（FIFO）から１文字取り出す
 */
public char getBuf(RingBuf buf);

/*-----------------------------------------------------------------------------
 *   名前    : unputBuf
 *   戻り値  : ture: 正常， false: バッファが空
 *   引数    : RingBuf buf  リングバッファ構造体
 *   解説    : リングバッファ（FIFO）から最後に追加した１文字を削除する
 */
public boolean unputBuf(RingBuf buf);

/*-----------------------------------------------------------------------------
 *   名前    : ISEmpty（マクロ）
 *   戻り値  : ture: バッファが空， false: バッファが空ではない
 *   引数    : RingBuf b  リングバッファ構造体
 *   解説    : リングバッファ（FIFO）が空かどうか調べる
 */
#define ISEmpty(b) ((b).cnt==0)

/*-----------------------------------------------------------------------------
 *   名前    : ISFull（マクロ）
 *   戻り値  : ture: バッファが満杯， false: バッファに空きがある
 *   引数    : RingBuf b  リングバッファ構造体
 *   解説    : リングバッファ（FIFO）が満杯かどうか調べる
 */
#define ISFull(b) ((b).cnt==(b).size)

// デバッグ関係
/*-----------------------------------------------------------------------------
 *   名前    : dbgPutStr
 *   戻り値  : なし
 *   引数    : char[] str
 *   解説    : メッセージをシリアル出力に書き出す（Bluetoothではない）
 *             ttyWrite と異なり OS の管理外で動作する
 *             デバッグ目的以外で使用してはならない
 */
public void dbgPutStr(char[] str);            // ちょっとした動作確認用

/*-----------------------------------------------------------------------------
 *   名前    : panic
 *   戻り値  : なし
 *   引数    : char[] msg   メッセージ
 *             ...          DEBUGフラグ付きでコンパイル時printfのようになる
 *   解説    : メッセージをシリアル出力に書き出しCPUを停止する
 *             TeCのRUNボタンを押しても再開しない
 */
public void panic(char[] msg, ...);

#ifdef DEBUG
/*-----------------------------------------------------------------------------
 *   名前    : printF
 *   解説    : デバッグ用の簡易 printf
 *             シリアル出力に書き出す（Bluetoothではない）
 *             %d, %o, %x, %c, %s, %% を使用できる．
 *             ttyWrite と異なり OS の管理外で動作する
 *             デバッグ目的以外で使用してはならない
 *             デバッグモードにするためには os ホルダの
 *              GNUmakefile で DEBUG を有効にする
 */
 public int printF(char[] fmt, ...);
#endif
