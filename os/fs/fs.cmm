/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * fs/fs.cmm : FAT16 ファイルシステム(FS)サーバの本体、ファイルを管理する
 *
 * 2020.08.16 : stat で void[] ではなく Stat 構造体を使用するように変更
 * 2019.12.27 : システムコールの引数を論理アドレスに変更
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2015.12.17 : openDir と readDir を削除
 * 2015.11.17 : mkDir と rmDir を追加
 * 2015.09.03 : receive() が LINK を返すので getLink() の使用を中止(重村)
 * 2015.09.02 : fatFs.cmm から fs.cmm に名称変更
 *              インクルードファイルの見直し(重村)
 * 2015.06.04 : openDir と readDir のコメントを解除（ls ルーチンで使用する)
 * 2015.05.27 : IPC のセマフォ使用化による変更
 *              (ランデブ内で要求クライアントの PID 取得)
 * 2015.05.08 : システムコールの種類を示す #define を syscall.h に移植
 * 2015.03.10 : open システムコールの時、要求クライアントの PID を上位クラスに
 *              渡すよう変更
 * 2014.11.25 : seek システムコールを実装
 * 2014.11.04 : mkDir システムコールを実装
 * 2014.10.06 : remove システムコールを実装
 * 2014.10.03 : creat システムコールを実装
 * 2014.06.03 : 村田開発開始、IPC に関わる部分を変更
 * 2012.07.30 : fatFsMain で newSem を実行していた。(バグ)、fatFsInit に移動
 * 2012.04.29 : vgaWin を削除(使用していないのに定義していた)
 * 2011.05.23 : boot.cmm を基に作成
 *
 * $Id$
 *
 */

#include <util.hmm>
#include <kernel.hmm>
#include <syscall.hmm>
#include "fsDef.hmm"
#include "blkFile.hmm"
#include "fatSys.hmm"
#include "fs.hmm"

#ifndef EMBEDDED
#include <mm.hmm>
#include <pm.hmm>
#endif

//-----------------------------------------------------------------------------
// FAT16 ファイルシステムサーバの本体（メインループ他）
//-----------------------------------------------------------------------------

// FAT ファイルシステムの本体(ここで各システムコールを実行する)
int fatFsSysCall(int op, int prm1, int prm2, int prm3, PCB pcb) {
  int rs;                                             // 実行結果(返り値)
  if (op==CREAT) {
    rs = sysCreat(_ItoA(prm1));                       // creat(path)
  } else if (op==REMOVE) {
    rs = sysRemove(_ItoA(prm1));                      // remove(path)
  } else if (op==MKDIR) {
    rs = sysMkDir(_ItoA(prm1));                       // mkDir(path)
  } else if (op==RMDIR) {
    rs = sysRmDir(_ItoA(prm1));                       // rmDir(path)
  } else if (op==OPEN) {
    rs = sysOpen(_ItoA(prm1), prm2, pcb);             // open(path,mode,pcb)
  } else if (op==CLOSE) {
    rs = sysClose(prm1, pcb);                         // close(idx,pcb)
  } else if (op==READ) {
    rs = sysRead(pcb, prm1, _ItoA(prm2), prm3);       // read(pcb,idx,buf,len)
  } else if (op==WRITE) {
    rs = sysWrite(pcb, prm1, _ItoA(prm2), prm3);      // write(pcb,idx,buf,len)
  } else if (op==SEEK) {
    rs = sysSeek(pcb, prm1, prm2, prm3);              // seek(pcb,idx,posH,posL)
  } else if (op==STAT) {
    rs = sysStat(_ItoA(prm1), _ItoA(prm2));           // stat(path,stat)
  } else  rs = -1;                                    // どれでもなければエラー
  return rs;
}

// ファイルシステムサーバのメインルーチン
public void fsMain() {
  fsLink = newLink();                                 // リンク生成
  blkInit();                                          // ドライバの初期化等
  while (true) {                                      // FS のメインループ
    Link l = receive(fsLink);                         // システムコール受付
    int r=fatFsSysCall(l.op, l.prm1, l.prm2, l.prm3,  // システムコール実行
                       l.client);
    send(fsLink ,r);                                  // 結果を返す
  }
}

//----------------------------------------------------------------------------
// システムコールインターフェイス
//   クライアントプロセスが以下のルーチンを呼出しサーバと IPC する
//----------------------------------------------------------------------------

// パス名を引数とするシステムコールの発行ルーチン
#ifndef EMBEDDED
int peekSndrec(int com, char[] path, int prm3, int prm4) {
  if (curProc.pid > maxSrvPid) {                        // ユーザプロセスなら
    path = peekS(_AtoI(path));                          //   仮想空間から
  }                                                     //     パスを読み出す
  int r = sndrec(fsLink, com, _AtoI(path), prm3, prm4); // システムコール実行
  if (curProc.pid > maxSrvPid) {                        // ユーザプロセスなら
    free(path);                                         //   パスを解放する
  }
  return r;
}
#endif

// creat システムコール
public int creat(char[] path) {
#ifdef EMBEDDED
 int r = sndrec(fsLink, CREAT, _AtoI(path), 0, 0);
#else
 int r = peekSndrec(CREAT, path, 0, 0);
#endif
 return r;
}

// remove システムコール
public int remove(char[] path) {
#ifdef EMBEDDED
 int r = sndrec(fsLink, REMOVE, _AtoI(path), 0, 0);
#else
 int r = peekSndrec(REMOVE, path, 0, 0);
#endif
 return r;
}

// mkDir システムコール
public int mkDir(char[] path) {
#ifdef EMBEDDED
 int r = sndrec(fsLink, MKDIR, _AtoI(path), 0, 0);
#else
 int r = peekSndrec(MKDIR, path, 0, 0);
#endif
 return r;
}

// rmDir システムコール
public int rmDir(char[] path) {
#ifdef EMBEDDED
 int r = sndrec(fsLink, RMDIR, _AtoI(path), 0, 0);
#else
 int r = peekSndrec(RMDIR, path, 0, 0);
#endif
 return r;
}

// open システムコール
public int open(char[] path, int mode) {
#ifdef EMBEDDED
  int fd = sndrec(fsLink, OPEN, _AtoI(path), mode, 0);
#else
  int fd = peekSndrec(OPEN, path, mode, 0);
#endif
  return fd;
}

// close システムコール
public int close(int fd) {
  int r = sndrec(fsLink, CLOSE, fd, 0, 0);
  return r;
}

#ifndef EMBEDDED
int readWrite(int fd, void[] buf, int len, int com){
  int total = 0;                                    // 結果のバイト数の合計
  int vAdr = _AtoI(buf);
  if (curProc.pid > maxSrvPid) {                    // ユーザプロセスなら
    while (len>0) {                                 // lenは32k以下
      int vLen = PAGESIZ;                           // 今回の長さ
      int offs = vAdr % PAGESIZ;                    // ページ内オフセット
      if(offs==0) {                                 // 開始がページ境界
        if(len<PAGESIZ) vLen = len;                 // ページサイズより小
      } else {                                      // 開始がページ境界でない
        if(offs+len<PAGESIZ) {
          vLen = len;                               // 残りの長さ
        } else {                                    // ページサイズより大きい
          vLen = PAGESIZ - offs;                    // ページ境界まで
        }
      }
      int pAdr = load(vAdr);                        // 物理アドレス
      int r = sndrec(fsLink, com, fd, pAdr, vLen);  // ファイル <=> フレーム
      release(vAdr);                                // フレームのsビットをOFF
      if(r<0) return r;                             // エラー発生
      total = total + r;                            // rは正の値
      if(r!=vLen) break;                            // EOF
      vAdr = vAdr + vLen;                           // 次の開始アドレス
      len = len - vLen;                             // 残りの長さ
    }
  } else {                                          // カーネルプロセスなら
    total = sndrec(fsLink, com, fd, vAdr, len);     // ファイル <=> フレーム
  }
  return total;
}
#endif

// read システムコール
public int read(int fd, void[] buf, int len) {
#ifdef EMBEDDED
  int r = sndrec(fsLink, READ, fd, _AtoI(buf), len);
#else
  int r = readWrite(fd, buf, len, READ);
#endif
  return r;
}

// write システムコール
public int write(int fd, void[] buf, int len) {
#ifdef EMBEDDED
  int r = sndrec(fsLink, WRITE, fd, _AtoI(buf), len);
#else
  int r = readWrite(fd, buf, len, WRITE);
#endif
  return r;
}

// seek システムコール
public int seek(int fd, int ptrh, int ptrl) {
  int r = sndrec(fsLink, SEEK, fd, ptrh, ptrl);
  return r;
}

// stat システムコール
public int stat(char[] path, Stat stat) {
#ifdef EMBEDDED
  int r = sndrec(fsLink, STAT, _AtoI(path), _AtoI(stat), 0);
#else
  Stat stmp = stat;
  if (curProc.pid > maxSrvPid) {                    // ユーザプロセスなら
    stat = malloc(sizeof(Stat));                    //   結果を書き込む領域を
  }                                                 //     物理空間に確保
  int r = peekSndrec(STAT, path, _AtoI(stat), 0);
  if (curProc.pid > maxSrvPid) {                    // ユーザプロセスなら
    pokeM(_AtoI(stmp), stat, sizeof(Stat));         //   仮想空間に書き込み
    free(stat);                                     //     物理メモリを解放
  }
#endif
  return r;
}
