/*
 * mp3Files.cmm : MP3ファイルの一覧
 */
#include <fs.hmm>
#include <util.hmm>
#include "appUtil.hmm"
#include "Files.hmm"
#include "tag.hmm"

//-----------------------------------------------------------------------------
// MP3ファイルの一覧（ただし，最大12個）
//-----------------------------------------------------------------------------
// 12つのファイル名
char[][] fnames = array(12, 13);                     // 12345678.123
int numFile;                                        // ファイルの個数
char[] mp3Dir = "/MP3";
char[] path = array(18);                            // /MP3/12345678.123

char[] fnameToPath(char[] fname) {
  strCpy(path, mp3Dir);
  strCat(path, "/");
  strCat(path, fname);
  return path;
}

// /MP3 ディレクトリからファイルの一覧を作る（初期化）
public void mp3FilesInit() {
  int fd;                                           // ファイルディスクリプタ
  if ((fd=open(mp3Dir, READ_MODE))<0) {
    panic("panic:can't open MP3 Dir");
  }
  Dir dir;
  int i = 0;
  while (i<12 && (dir=readDir(fd, "MP3"))!=null) {   // 最大12つファイル名を読む
    strCpy(fnames[i], dir.name);
    i = i + 1;
  }
  numFile = i;
  close(fd);
}

// n 番目ファイル名を返す（1<=n && n<=5）
public char[] mp3FilesGetName(int n) {
  if (1<=n && n<=numFile) {
    return fnames[n-1];
  }
  return null;
}

// n 番目パス名を返す（1<=n && n<=5）
public char[] mp3FilesGetPath(int n) {
  if (1<=n && n<=numFile) {
    return fnameToPath(fnames[n-1]);
  }
  return null;
}


#define MAX_TAGS   13
#define TAG_LEN    16
#define TAG_LEN_PLUS2 18

char[][] tags = array(MAX_TAGS, TAG_LEN);
char[] buftag = array(TAG_LEN_PLUS2);
int numTag = 0;


// “Norm, ×15 を tags 配列にセットする
void tagsSetDefault()
{
  for (int i = 0; i < 13; i= i+1) {
    strCpy(tags[i], "Norm,");   // 末尾の ‘,’ もそのまま保存
  }
  numTag = 13;
}



/* -------------------------------------------------- */
/* タグをテキストファイルから読み出し（ファイルが無ければ “Norm,”×12 を生成して保存） */   
/* -------------------------------------------------- */
public char[][] tagsLoadFromTxt(char[] listFile)
{
  /* ---------- ファイルを開く ---------- */
  int fd = open(listFile, READ_MODE);
  if (fd < 0) {                       // 無ければ生成 
    tagsSetDefault();
    tagMain(tags);
    return tags;
  }

  int  i  = 0;                        // 行インデックス        
  int  j  = 0;                        // 列インデックス        
  char   ch;                          // 読み取った文字        

  for ( ; i < MAX_TAGS && read(fd, buftag, 1) == 1 ; ) {
    ch = buftag[0];                      // 取り出した 1 文字     
    if (ch == '\r') {                 
      continue;
    }
    if (ch == '\n') {                 // 行終端 → 次のタグへ   
      tags[i][j] = '\0';              // NUL 終端              
      i = i + 1;                      // 行のインクリメント            
      j = 0;                          // 列をリセット       
      continue;
    }
    if (j < TAG_LEN - 1) {            // 行バッファに空きあり  
      tags[i][j] = ch;                // 文字をコピー      
      j = j + 1;
    }
  }

  // ファイル末尾が改行で終わらない場合の対応
  if (j > 0 && i < MAX_TAGS) {
    tags[i][j] = '\0';
    i = i + 1;
  }
  close(fd);
  numTag = i;

  int songCount = 0;
  while (mp3FilesGetName(songCount + 1) != null) {
    songCount = songCount + 1;             
  }
  if (songCount > MAX_TAGS) songCount = MAX_TAGS;

  boolean patched = false;
  for (int k = 0; k < songCount; k = k + 1) {
    if (k >= numTag || tags[k] == null || tags[k][0] == '\0') {
      strCpy(tags[k], "Norm,");             
      patched = true;
    }
  }
  for (int k = songCount; k < MAX_TAGS; k = k + 1) {
    tags[k][0] = '\0';
  }
  numTag = songCount;
  if (patched) {
    tagMain(tags);        
  }

  return tags;
}



#define PL_NAME_LEN    13               
#define MAX_PLAYLIST 12
#define PL_BUF_LEN     16    

char[][] playlistNames = array(MAX_PLAYLIST, PL_NAME_LEN);

int mp3FilesFindIndex(char[] name)
{
    int idx = 1;
    char[] n;
    while ((n = mp3FilesGetName(idx)) != null) {
        if (strCmp(n, name) == 0) return idx;  
        idx = idx + 1;
    }
    return -1;                            
}
/*--------------------------------------------------------------*/
/* プレイリストを読み込み（無ければ空ファイルを作って終了）      */
/*   読み込んだファイル名を playlistNames[] に保存し，           */
/*   同時に曲インデックスを playList[] に変換               */
/*--------------------------------------------------------------*/
char[] bufPlayList = array(PL_BUF_LEN);
int[] playList = { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};


public int[] playlistLoadFromTxt(char[] listFile)
{
    int playListCount = 0;
    int fd = open(listFile, READ_MODE);
    if (fd < 0) {                              
        fd = creat(listFile);
        close(fd);
        playListCount = 0;
        return playList;
    }
    int  i = 0, j = 0;
    char ch;

    for ( ; i < MAX_PLAYLIST && read(fd, bufPlayList, 1) == 1 ; ) {
        ch = bufPlayList[0];

        if (ch == '\r') continue;            

        if (ch == '\n') {                    
            playlistNames[i][j] = '\0';
            playList[i]   = mp3FilesFindIndex(playlistNames[i]);
            if (playList[i] != -1) i = i + 1;  
            j = 0;                          
            continue;
        }

        if (j < PL_NAME_LEN - 1) {            
            playlistNames[i][j] = ch;
            j = j + 1;
        }
    }
    // ファイル末尾が改行無しで終わった場合の処理 
    if (j > 0 && i < MAX_PLAYLIST) {
        playlistNames[i][j] = '\0';
        playList[i]   = mp3FilesFindIndex(playlistNames[i]);
        if (playList[i] != -1) i = i + 1;
    }
    close(fd);
    playListCount = i;
    for (int k = playListCount; k < MAX_PLAYLIST; k = k + 1) {
        playList[k] = -1;
    }
    return playList;
}
