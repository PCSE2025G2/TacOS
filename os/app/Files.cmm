/*
 * mp3Files.cmm : MP3ファイルの一覧
 */
#include <fs.hmm>
#include <util.hmm>
#include "appUtil.hmm"
#include "Files.hmm"
#include "tag.hmm"

//-----------------------------------------------------------------------------
// MP3ファイルの一覧（ただし，最大12個）
//-----------------------------------------------------------------------------
// 12つのファイル名
char[][] fnames = array(12, 13);                     // 12345678.123
int numFile;                                        // ファイルの個数
char[] mp3Dir = "/MP3";
char[] path = array(18);                            // /MP3/12345678.123

char[] fnameToPath(char[] fname) {
  strCpy(path, mp3Dir);
  strCat(path, "/");
  strCat(path, fname);
  return path;
}

// /MP3 ディレクトリからファイルの一覧を作る（初期化）
public void mp3FilesInit() {
  int fd;                                           // ファイルディスクリプタ
  if ((fd=open(mp3Dir, READ_MODE))<0) {
    panic("panic:can't open MP3 Dir");
  }
  Dir dir;
  int i = 0;
  while (i<12 && (dir=readDir(fd, "MP3"))!=null) {   // 最大12つファイル名を読む
    strCpy(fnames[i], dir.name);
    i = i + 1;
  }
  numFile = i;
  close(fd);
}

// n 番目ファイル名を返す（1<=n && n<=5）
public char[] mp3FilesGetName(int n) {
  if (1<=n && n<=numFile) {
    return fnames[n-1];
  }
  return null;
}

// n 番目パス名を返す（1<=n && n<=5）
public char[] mp3FilesGetPath(int n) {
  if (1<=n && n<=numFile) {
    return fnameToPath(fnames[n-1]);
  }
  return null;
}


#define MAX_TAGS   12
#define TAG_LEN    16
#define TAG_LEN_PLUS2 18

char[][] tags = array(MAX_TAGS, TAG_LEN);
char[] buf = array(TAG_LEN_PLUS2);
int numTag = 0;


// “Norm, ×15 を tags 配列にセットする
void tagsSetDefault()
{
  for (int i = 0; i < 12; i= i+1) {
    strCpy(tags[i], "Norm,");   // 末尾の ‘,’ もそのまま保存
  }
  numTag = 12;
}



/* -------------------------------------------------- */
/* タグをテキストファイルから読み出し（ファイルが無ければ “Norm,”×12 を生成して保存） */   
/* -------------------------------------------------- */
public char[][] tagsLoadFromTxt(char[] listFile)
{
  /* ---------- ファイルを開く ---------- */
  int fd = open(listFile, READ_MODE);
  if (fd < 0) {                       // 無ければ生成 
    tagsSetDefault();
    tagMain(tags);
    return tags;
  }

  int  i  = 0;                        // 行インデックス        
  int  j  = 0;                        // 列インデックス        
  char   ch;                          // 読み取った文字        

  for ( ; i < MAX_TAGS && read(fd, buf, 1) == 1 ; ) {
    ch = buf[0];                      // 取り出した 1 文字     
    if (ch == '\r') {                 
      continue;
    }
    if (ch == '\n') {                 // 行終端 → 次のタグへ   
      tags[i][j] = '\0';              // NUL 終端              
      i = i + 1;                      // 行のインクリメント            
      j = 0;                          // 列をリセット       
      continue;
    }
    if (j < TAG_LEN - 1) {            // 行バッファに空きあり  
      tags[i][j] = ch;                // 文字をコピー      
      j = j + 1;
    }
  }

  // ファイル末尾が改行で終わらない場合の対応
  if (j > 0 && i < MAX_TAGS) {
    tags[i][j] = '\0';
    i = i + 1;
  }
  close(fd);
  numTag = i;                        
  return tags;      // tagsを返す 
}


