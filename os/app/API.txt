組み込み版のTacOSでアプリケーションが利用できるAPI

//*****************************************************************************
// プロセス関係のシステムコール
//*****************************************************************************

/*----------------------------------------------------------------------------
 * プロセスをスケジューリングする(実行可能列に登録する)
 *   名前   : schProc
 *   引数   : PCB proc スケージューリングするプロセス
 *   解説   : schProc は、プロセスを実行可能列に登録する
 */
#include <kernel.hmm>
public void schProc(PCB proc);

/*----------------------------------------------------------------------------
 * 自プロセスの PID を取得する
 *   名前   : getPid
 *   戻り値 : int プロセス番号
 *   解説   : getPid は、呼び出したプロセス自身の PID を返す
 */
#include <kernel.hmm>
public int getPid();

/*----------------------------------------------------------------------------
 * プロセスを初期化する
 *   名前   : newProc
 *   戻り値 : なし
 *   引数   : int start  プロセスの実行開始アドレス
 *            int nice   プロセスの優先度(0:最高優先度、P_LOW_PRI:最低優先度)
 *            int usp    プロセスのユーザモードスタックポインタの初期値
 *            int flag   プロセスのCPUフラグの初期値
 *            PCB pcb    プロセスのPCB
 *            int[] fds  オープンファイルの一覧を格納する領域
 *   解説   : newProc ルーチンは、カーネルスタックと PCB を初期化する
 */
#include <kernel.hmm>
public void newProc(int start, int nice, int usp, int flag, PCB pcb, int[] fds);

/*----------------------------------------------------------------------------
 * セマフォの新規割当て
 *   名前   : newSem
 *   戻り値 : int セマフォ番号
 *   引数   : int init セマフォの初期値
 *   解説   : newSem は使用されていないセマフォを探し初期化する
 *            初期化したセマフォの番号を返す
 */
#include <kernel.hmm>
public int newSem(int init);

/*----------------------------------------------------------------------------
 * セマフォの解放
 *   名前   : freeSem
 *   戻り値 : なし
 *   引数   : int sd セマフォ番号
 *   解説   : freeSem はセマフォをシステムに返却する
 */
#include <kernel.hmm>
public void freeSem(int sd);

/*----------------------------------------------------------------------------
 *   名前   : semP
 *   戻り値 : なし
 *   引数   : int sd セマフォ番号
 *   解説   : semP は指定されたセマフォに P 操作を行う
 *            値が 0 以下のセマフォに P 操作した場合、プロセスがブロックする
 */
#include <kernel.hmm>
public void semP(int sd);

/*----------------------------------------------------------------------------
 *   名前   : iSemV
 *   戻り値 : なし
 *   引数   : int sd  セマフォ番号
 *   解説   : semV は指定されたセマフォに V 操作を行う。
 *            その結果、起床したプロセスがあってもディスパッチしない
 *   注意   : 割込み禁止で呼出す
 */
#include <kernel.hmm>
public boolean iSemV(int sd);

/*----------------------------------------------------------------------------
 *   名前   : semV
 *   戻り値 : なし
 *   引数   : int sd セマフォ番号
 *   解説   : semV は指定されたセマフォに V 操作を行う。
 *            その結果、起床したプロセスがあった場合は自動的にディスパッチャ
 *            を呼び出す。
 */
#include <kernel.hmm>
public void semV(int sd);

/*----------------------------------------------------------------------------
 *   名前   : newLink
 *   戻り値 : リンク番号
 *   引数   : なし
 *   解説   : リンクを生成する。
 */
#include <kernel.hmm>
struct Link {             // リンクを表す構造体
  PCB server;             // リンクを所持するサーバ
  PCB client;             // リンクを使用中のクライアント
  int s1;                 // サーバがメッセージ受信待ちに使用するセマフォ
  int s2;                 // クライアント同士が相互排除に使用するセマフォ
  int s3;                 // クライアントがメッセージ返信待ちに使用するセマフォ
  int op;                 // メッセージの種類
  int prm1;               // メッセージのパラメータ1
  int prm2;               // メッセージのパラメータ2
  int prm3;               // メッセージのパラメータ3
};
public int newLink();

/*----------------------------------------------------------------------------
 *   名前   : receive
 *   戻り値 : LINK 構造体
 *   引数   : リンク番号
 *   解説   : サーバがリンクからリクエストを受け取る.
 */
#include <kernel.hmm>
public Link receive(int num);

/*----------------------------------------------------------------------------
 *   名前   : send
 *   戻り値 : なし
 *   引数   : int num  リンク番号
 *            int res  レスポンス
 *   解説   : サーバがリンクにレスポンスを送る。
 */
#include <kernel.hmm>
public void send(int num,int res);

/*----------------------------------------------------------------------------
 *   名前   : sndrec
 *   戻り値 : int レスポンス
 *   引数   : int num    リンク番号
              int op     メッセージの種類
              int prm1-3 メッセージのデータ
 *   解説   : クライアントがリンクを介してリクエストとレスポンスを送受信
 */
#include <kernel.hmm>
public int sndrec(int num,int op,int prm1,int prm2,int prm3);

/*----------------------------------------------------------------------------
 *  名前   : sleep
 *  戻り値 : 0:正常　<0:エラー
 *  引数   : int ms  スリープ時間(ms単位)
 *  解説   : 時間を指定してプロセスをスリープさせる。時間の単位は ms である。
 */
#include <kernel.hmm>
public int sleep(int ms);

//*****************************************************************************
// ファイルシステムのシステムコール
//*****************************************************************************

/*----------------------------------------------------------------------------
 *   名前   : creat
 *   戻り値 : int(正常なら0、失敗なら<0)
 *   引数   : char[] path  作成するファイルのパス
 *   解説   : ファイルを新規作成する
 */
#include <fs.hmm>
public int creat(char[] path);

/*----------------------------------------------------------------------------
 *   名前   : remove
 *　 戻り値 : int (正常なら0、失敗なら<0)
 *   引数   : char[] path  削除するファイルのパス
 *   解説   : ファイルを削除する
 */
#include <fs.hmm>
public int remove(char[] path);

/*----------------------------------------------------------------------------
 *  名前   : mkDir
 *　戻り値 : int (正常なら0、失敗なら<0)
 *　引数   : char[] path  作成するディレクトリのパス
 *  解説   : ディレクトリを作成する
 */
#include <fs.hmm>
public int mkDir(char[] path);

/*----------------------------------------------------------------------------
 *   名前   : rmDir
 *　 戻り値 : int(正常なら0、失敗なら<0)
 *　 引数   : char[] path  削除するディレクトリのパス
 *   解説   : ディレクトリを削除する
 */
#include <fs.hmm>
public int rmDir(char[] path);

/*----------------------------------------------------------------------------
 *   名前   : open
 *   戻り値 : int (ファイル番号(>=0)、-1=エラー)
 *   引数   : char[] path  ファイルへのパス
 *            int mode     オープンモード(READ_MODE/WRITE_MODE/APPEND_MODE)
 *   解説   : ファイルをオープンし、ファイル番号を返す
 */
#include <fs.hmm>
#define READ_MODE   0x0000         // オープンモード(READ)
#define WRITE_MODE  0x0001         // オープンモード(WRITE)
#define APPEND_MODE 0x0002         // オープンモード(APPEND)
public int open(char[] path, int mode);

/*----------------------------------------------------------------------------
 *   名前   : close
 *   戻り値 : int (0=正常、-1=エラー)
 *   引数   : int fd  オープン済みファイル番号
 *   解説   : ファイル/ディレクトリをクローズする
 */
#include <fs.hmm>
public int close(int fd);

/*----------------------------------------------------------------------------
 *   名前   : read
 *   戻り値 : int (読み込んだバイト数(>0)、0=EOF、-1=エラー)
 *   引数   : int fd      オープン済みファイル番号
 *            void[] buf  データを読み込むバッファ
 *            int len     バッファサイズ(バイト単位)
 *   解説   : ファイルからデータを読み込む
 */
#include <fs.hmm>
public int read(int fd, void[] buf, int len);

/*----------------------------------------------------------------------------
 *   名前   : write
 *   戻り値 : int (書き込んだバイト数(>=0)、<0=エラー)
 *   引数   : int fd      オープン済みファイル番号
 *            void[] buf  書き込むデータ
 *            int len     データサイズ(バイト単位)
 *   解説   : ファイルへからデータを書き込む
 */
#include <fs.hmm>
public int write(int fd, void[] buf, int len);

/*----------------------------------------------------------------------------
 *   名前   : seek
 *　 戻り値 : int (正常なら0、失敗なら<0)
 *　 引数   : int ptrh　上位絶対バイト位置
 *            int ptrl  下位絶対バイト位置
 *   解説   : ファイルの参照位置を変更する
 */
#include <fs.hmm>
public int seek(int fd, int ptrh, int ptrl);

/*----------------------------------------------------------------------------
 *   名前   : stat
 *　 戻り値 : int (正常なら0、失敗なら<0)
 *　 引数   : int path   ファイルへのパス
 *            Stat stat  ファイルの情報を格納する構造体
 *   解説   : ファイルの情報を取得する
 */
#include <fs.hmm>

struct Stat {   // FAT16ファイルシステムからファイルの情報を取り出す．
  int attr;     // read-only(0x01)，hidden(0x02)，directory(0x10) 他
  int clst;     // ファイルの開始クラスタ番号
  int lenH;     // ファイル長上位16ビット
  int lenL;     // ファイル長下位16ビット
};

public int stat(char[] path, Stat stat);

//*****************************************************************************
// メモリ管理システムコール
//*****************************************************************************

/*----------------------------------------------------------------------------
 *   名前   : malloc
 *　 戻り値 : void[] (失敗なら null)
 *　 引数   : int s  確保したいメモリの大きさ（バイト単位）
 *   解説   : メモリを確保する
 */
#include <mm.hmm>
public void[] malloc(int s);

/*----------------------------------------------------------------------------
 *   名前   : free
 *　 戻り値 : なし
 *　 引数   : void[] mem  解放したいメモリへのポインタ
 *   解説   : メモリを解放する
 */
#include <mm.hmm>
public void free(void[] mem);

//*****************************************************************************
// 特権命令など:
//   TaCの特殊な命令を呼び出す関数
//*****************************************************************************

/*-----------------------------------------------------------------------------
 *   名前    : setPri
 *   戻り値  : 操作前のflagレジスタの値
 *   引数    : flagにセットする値
 *   解説    : CPUのflagレジスタに値をセットする
 */
#include <util.hmm>
#define EI   0x0080                                 // 割込み許可
#define DI   0x0000                                 // 割込み不許可
#define KERN 0x0040                                 // カーネルモード
#define IPRV 0x0020                                 // I/O特権モード
#define USER 0x0000                                 // ユーザモード
public int setPri(int l);

/*-----------------------------------------------------------------------------
 *   名前    : in
 *   戻り値  : 入力した値
 *   引数    : int p  ポートのI/Oアドレス
 *   解説    : 16bit データをI/Oポートから入力する
 */
#include <util.hmm>
public int in(int p);

/*-----------------------------------------------------------------------------
 *   名前    : out
 *   戻り値  : なし
 *   引数    : int p  ポートのI/Oアドレス
 *             int v  出力する 16bit データ
 *   解説    : 16bit データをI/Oポートへ出力する
 */
#include <util.hmm>
public void out(int p, int v);

/*-----------------------------------------------------------------------------
 *   名前    : halt
 *   戻り値  : なし
 *   引数    : なし
 *   解説    : CPUを停止する（RUN を押しても再開しない）
 */
#include <util.hmm>
public void halt();

/*-----------------------------------------------------------------------------
 *   名前    : pause
 *   戻り値  : なし
 *   引数    : なし
 *   解説    : CPUを停止する（RUN を押すと戻ってくる）
 */
#include <util.hmm>
public void pause();

/*-----------------------------------------------------------------------------
 *   名前    : _fp
 *   戻り値  : FPの値
 *   引数    : なし
 *   解説    : CPUのFPレジスタの値を返す
 */
#include <util.hmm>
public int _fp();

//*****************************************************************************
// C-- サポート関数:
//   C-- に不足している機能を補う関数
//*****************************************************************************

/*-----------------------------------------------------------------------------
 *   名前    : _AtoI
 *   戻り値  : アドレスと同じ整数値
 *   引数    : アドレス
 *   解説    : C--の参照型を整数型に型変換する
 */
#include <util.hmm>
public int    _AtoI(void[] a);

/*-----------------------------------------------------------------------------
 *   名前    : _AtoA
 *   戻り値  : アドレス
 *   引数    : アドレス
 *   解説    : C--の参照型を参照型に型変換する
 */
#include <util.hmm>
public void[] _AtoA(void[] a);

/*-----------------------------------------------------------------------------
 *   名前    : _ItoA
 *   戻り値  : 整数値と同じアドレス
 *   引数    : 整数値
 *   解説    : C--の整数型を参照型に型変換する
 */
#include <util.hmm>
public void[] _ItoA(int a);

/*-----------------------------------------------------------------------------
 *   名前    : _addrAdd
 *   戻り値  : アドレス
 *   引数    : void[] a  アドレス
 *             int i     整数
 *   解説    : アドレスに整数を足して返す
 */
#include <util.hmm>
public void[] _addrAdd(void[] a, int i);

/*-----------------------------------------------------------------------------
 *   名前    : _uComp
 *   戻り値  : 大小比較の結果（1:>, 0:=, -1:<）
 *   引数    : int a, b  整数
 *   解説    : a, b を符号なし整数とみなして大小比較する
 */
#include <util.hmm>
public int    _uCmp(int a, int b);

/*-----------------------------------------------------------------------------
 *   名前    : _aComp
 *   戻り値  : 大小比較の結果（1:>, 0:=, -1:<）
 *   引数    : void[] a, b  アドレス
 *   解説    : a, b アドレスの大小比較をする
 */
#include <util.hmm>
public int    _aCmp(void[] a, void[] b);            // アドレスの大小比較

/*-----------------------------------------------------------------------------
 *   名前    : _args
 *   戻り値  : _argsを呼び出した関数の第２引数のアドレス
 *   引数    : なし
 *   解説    : printfのような可変引数の関数が使用する．
 *            int a = args();
 *            a[0]が第２引数，a[1]が第３引数．．．
 */
#include <util.hmm>
public void[] _args();

//*****************************************************************************
// 32bit 演算ルーチン：
//   32bit データは大きさ 2 の int 配列で表現する．
//   int[] dst が 32bit データを表現するとき，
//   dst[0]:上位16bit, dst[1]:下位16bitとなる．
//*****************************************************************************

/*-----------------------------------------------------------------------------
 *   名前    : _add32
 *   戻り値  : dstと同じアドレス
 *   引数    : int[] dst  32bit データ
 *             int[] src  32bit データ
 *   解説    : 32bit データ dst と src の和を計算する．（dst <- dst + src）
 */
#include <util.hmm>
public int[]  _add32(int[] dst, int[] src);

/*-----------------------------------------------------------------------------
 *   名前    : _sub32
 *   戻り値  : dstと同じアドレス
 *   引数    : int[] dst  32bit データ
 *             int[] src  32bit データ
 *   解説    : 32bit データ dst と src の差を計算する．（dst <- dst - src）
 */
#include <util.hmm>
public int[]  _sub32(int[] dst, int[] src);

/*-----------------------------------------------------------------------------
 *   名前    : _mul32
 *   戻り値  : dstと同じアドレス
 *   引数    : int[] dst  32bit データ
 *             int src    16bit データ
 *   解説    : 32bit データ dst と 16bit データ src の積を計算する．
 *             (dst <- dst * src)
 */
#include <util.hmm>
public int[]  _mul32(int[] dst, int src);

/*-----------------------------------------------------------------------------
 *   名前    : _ld32（マクロ）
 *   引数    : int[] dst  32bit データ
 *             int ｈ     16bit データ
 *             int l      16bit データ
 *   解説    : 2 つの 16bit データから 1 つの 32bit データを作る
 *             dst[0] <- h
 *             dst[1] <- l
 */
#include <util.hmm>
#define ld32(dst,h,l) ((dst)[0]=(h),(dst)[1]=(l))   // 32bit のデータのロード

/*-----------------------------------------------------------------------------
 *   名前    : _st32（マクロ）
 *   引数    : int ｈ     16bit データ
 *             int l      16bit データ
 *             int[] src  32bit データ
 *   解説    : 32bit データを 2 つの 16bit データにストアする
 *             h <- dst[0]
 *             l <- dst[1]
 */
#include <util.hmm>
#define st32(h,l,src) ((h)=(src)[0],(l)=(src)[1])   // 32bit のデータのストア

/*-----------------------------------------------------------------------------
 *   名前    : _uCmp32
 *   戻り値  : 大小比較の結果（1:>, 0:=, -1:<）
 *   引数    : int[] a, b  32bit データ
 *   解説    : a, b を符号なし 32bit データとして大小比較する
 */
#include <util.hmm>
public int _uCmp32(int[] a, int[] b);

//*****************************************************************************
// 文字，文字列操作：
//   C-- の文字列は '\0' で終端される文字配列のこと
//*****************************************************************************

/*-----------------------------------------------------------------------------
 *   名前    : toUpper
 *   戻り値  : 変換結果
 *   引数    : c 文字
 *   解説    : 引数の文字が英字アルファベット小文字なら大文字に変換して返す
 *             英字アルファベット以外ならそのまま返す
 */
#include <util.hmm>
public char toUpper(char c);

/*-----------------------------------------------------------------------------
 *   名前    : isDigit（マクロ）
 *   戻り値  : 判定結果（boolean型）
 *   引数    : c 文字
 *   解説    : 引数の文字が数字なら ture，そうでなければ false を返す
 */
#include <util.hmm>
#define isDigit(c) (ord('0')<=ord(c) && ord(c)<=ord('9'))

/*-----------------------------------------------------------------------------
 *   名前    : isLower（マクロ）
 *   戻り値  : 判定結果（boolean型）
 *   引数    : c 文字
 *   解説    : 引数の文字が英字アルファベット小文字なら ture，
 *             そうでなければ false を返す
 */
#include <util.hmm>
#define isLower(c) (ord('a')<=ord(c) && ord(c)<=ord('z'))

/*-----------------------------------------------------------------------------
 *   名前    : isUpper（マクロ）
 *   戻り値  : 判定結果（boolean型）
 *   引数    : c 文字
 *   解説    : 引数の文字が英字アルファベット大文字なら ture，
 *             そうでなければ false を返す
 */
#include <util.hmm>
#define isUpper(c) (ord('A')<=ord(c) && ord(c)<=ord('Z'))

/*-----------------------------------------------------------------------------
 *   名前    : isPrint（マクロ）
 *   戻り値  : 判定結果（boolean型）
 *   引数    : c 文字
 *   解説    : 引数の文字が ASCII コードの印刷可能文字なら ture，
 *             そうでなければ false を返す
 */
#include <util.hmm>
#define isPrint(c) (0x20<=ord(c) && ord(c)<=0x7e)

/*-----------------------------------------------------------------------------
 *   名前    : strLen
 *   戻り値  : 文字列の長さ
 *   引数    : char[] s 文字列を格納した配列
 *   解説    : s の長さをバイト単位で返す
 */
#include <util.hmm>
public int strLen(char[] s);

/*-----------------------------------------------------------------------------
 *   名前    : strCpy
 *   戻り値  : dst と同じアドレス
 *   引数    : char[] dst  コピー先配列
 *             char[] src  コピー元文字列
 *   解説    : src に格納されたC--文字列を dst にコピーする
 */
#include <util.hmm>
public char[] strCpy(char[] dst, char[] src);

/*-----------------------------------------------------------------------------
 *   名前    : strRchr
 *   戻り値  : 文字 c が最後に出現した位置(<0:出現しなかった)
 *   引数    : char[] s  探索対象文字列
 *             char c    探索する文字
 *   解説    : 文字列 s で，c が最後に出現した位置を添え字で返す．
 *             見つからなかった場合は -1 を返す
 */
#include <util.hmm>
public int strRchr(char[] s, char c);

/*-----------------------------------------------------------------------------
 *   名前    : wordLE（マクロ）
 *   戻り値  : ワード（16bit）データ
 *   引数    : char[] b  バイト配列（char配列）
 *             int i     ワード位置
 *   解説    : バイト配列 b の第 i バイトから格納されている
 *             リトルエンディアンのワードデータを取り出す
 *             (FAT ファイルシステムから読み込んだものがリトルエンディアン)
 */
#include <util.hmm>
#define wordLE(b, i) ((ord((b)[(i)+1])<<8) | ord((b)[i]))

/*-----------------------------------------------------------------------------
 *   名前    : stWordLE（マクロ）
 *   戻り値  : なし
 *   引数    : char[] b  バイト配列（char配列）
 *             int i     ワード位置
 *             int s     ワード（16bit）データ
 *   解説    : バイト配列 b の第 i バイトに
 *             リトルエンディアンのワードデータを書き込む
 *             (FAT ファイルシステムにはリトルエンディアンで書き込む)
 */
#include <util.hmm>
#define stWordLE(b,i,s) {(b)[i]=chr(s); b[(i)+1]=chr((s)>>8);}

/*-----------------------------------------------------------------------------
 *   名前    : リングバッファ（構造体）
 *   解説    : 文字型の FIFO データ構造
 */
#include <util.hmm>
struct RingBuf {
  char[] buf;                                 // バッファ
  int    size;                                // バッファサイズ
  int    head, tail, cnt;                     // ポインタ
};

/*-----------------------------------------------------------------------------
 *   名前    : putBuf
 *   戻り値  : ture: 正常， false: バッファがパンク
 *   引数    : RingBuf buf  リングバッファ構造体
 *             char c       追加する文字
 *   解説    : リングバッファ（FIFO）に１文字追加する
 */
#include <util.hmm>
public boolean putBuf(RingBuf buf, char c);

/*-----------------------------------------------------------------------------
 *   名前    : getBuf
 *   戻り値  : 取り出した文字（バッファが空の場合は'\0'を返す）
 *   引数    : RingBuf buf  リングバッファ構造体
 *   解説    : リングバッファ（FIFO）から１文字取り出す
 */
#include <util.hmm>
public char getBuf(RingBuf buf);

/*-----------------------------------------------------------------------------
 *   名前    : unputBuf
 *   戻り値  : ture: 正常， false: バッファが空
 *   引数    : RingBuf buf  リングバッファ構造体
 *   解説    : リングバッファ（FIFO）から最後に追加した１文字を削除する
 */
#include <util.hmm>
public boolean unputBuf(RingBuf buf);

/*-----------------------------------------------------------------------------
 *   名前    : ISEmpty（マクロ）
 *   戻り値  : ture: バッファが空， false: バッファが空ではない
 *   引数    : RingBuf b  リングバッファ構造体
 *   解説    : リングバッファ（FIFO）が空かどうか調べる
 */
#include <util.hmm>
#define ISEmpty(b) ((b).cnt==0)

/*-----------------------------------------------------------------------------
 *   名前    : ISFull（マクロ）
 *   戻り値  : ture: バッファが満杯， false: バッファに空きがある
 *   引数    : RingBuf b  リングバッファ構造体
 *   解説    : リングバッファ（FIFO）が満杯かどうか調べる
 */
#include <util.hmm>
#define ISFull(b) ((b).cnt==(b).size)

/*-----------------------------------------------------------------------------
 *   名前    : dbgPutStr
 *   戻り値  : なし
 *   引数    : char[] str
 *   解説    : メッセージをシリアル出力に書き出す（Bluetoothではない）
 *             ttyWrite と異なり OS の管理外で動作する
 *             デバッグ目的以外で使用してはならない
 */
#include <util.hmm>
public void dbgPutStr(char[] str);            // ちょっとした動作確認用

/*-----------------------------------------------------------------------------
 *   名前    : panic
 *   戻り値  : なし
 *   引数    : char[] msg   メッセージ
 *             ...          DEBUGフラグ付きでコンパイル時printfのようになる
 *   解説    : メッセージをシリアル出力に書き出しCPUを停止する
 *             TeCのRUNボタンを押しても再開しない
 */
#include <util.hmm>
public void panic(char[] msg, ...);

/*-----------------------------------------------------------------------------
 *   名前    : printF
 *   解説    : デバッグモードで使用できる簡易 printf
 *             シリアル出力に書き出す（Bluetoothではない）
 *             %d, %o, %x, %c, %s, %% を使用できる．
 *             ttyWrite と異なり OS の管理外で動作する
 *             デバッグ目的以外で使用してはならない
 *             デバッグモードにするためには os ホルダの
 *              GNUmakefile で DEBUG を有効にする
 */
#define DEBUG 1
#include <util.hmm>
public int printF(char[] fmt, ...);

//*****************************************************************************
//* シリアル入出力(tty)システムコール（ttyはデフォルトでは切り離してある）
//*****************************************************************************

/*----------------------------------------------------------------------------
 *   名前   : ttyRead
 *   戻り値 : 読み込んだ文字数
 *   引数   : void[] buf 入力された文字列を格納するバッファ
 *            次のようなプログラムで準備しておく
 *              -----------------------------------------------------------
 *              char[] buf = malloc(81);            // 1行の最大入力数は80文字
 *              ttyRead(buf, 81);
 *              -----------------------------------------------------------
 *            int len バッファの長さ
 *   解説   : キーボード入力された1行分の文字列(Enter が押されるまで(<80文字))を
 *            取得する
 */
#include <tty.hmm>
public int ttyRead(void[] buf, int len);

/*----------------------------------------------------------------------------
 *   名前   : ttyWrite
 *   戻り値 : 書き込んだ文字数
 *   引数   : void[] buf  出力したい文字列を格納するバッファ
 *            int len  バッファの長さ
 *   解説   : 文字列をディスプレイに表示する
 */
#include <tty.hmm>
public int ttyWrite(void[] buf, int len);

/*----------------------------------------------------------------------------
 *   名前   : ttyCtl
 *   戻り値 : 操作の結果
 *   引数   : int request 実行する操作
 *            int mode 操作のパラメータ
 *   解説   : ttyのモードを操作する．modeはビットの組み合わせになっている．
 */
#include <tty.hmm>
#define TTYCTL_GETMODE     0                  // request : 現在のモードを読む
#define TTYCTL_SETMODE     1                  // request : モードを変更する
#define TTYCTL_MODE_COOKED 1                  // mode : 行編集モード
#define TTYCTL_MODE_ECHO   2                  // mode : エコーあり
#define TTYCTL_MODE_NBLOCK 4                  // mode : readがブロックしない
public int ttyCtl(int request, int mode);
