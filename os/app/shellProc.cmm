/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 *
 */
#include <kernel.hmm>
#include <util.hmm>
#include "lcd.hmm"
#include "mp3Proc.hmm"
#include "spi.hmm"
#include "Files.hmm"
#include "shellProc.hmm"
#include "screen.hmm"
#include "format.hmm"
#include "playlist.hmm"
#include "tag.hmm"

//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)

int readSw() {
  int sw = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
  int swd = sw & sw0;                               // デバウンス
  int sw2 = (sw1 ^ swd) & swd;                      // 今回，新たに押されたSW
  sw0 = sw;
  sw1 = swd;
  return sw2;
}

int swToNum(int sw) {
  int num = -1;
  if ((sw & SW6)!=0) {                              // 6 番のスイッチが押された
    num = 6;
  } else if ((sw & SW5)!=0) {                       // 5 番のスイッチが押された
    num = 5;
  } else if ((sw & SW4)!=0) {                       // 4 番のスイッチが押された
    num = 4;
  } else if ((sw & SW3)!=0) {                       // 3 番のスイッチが押された
    num = 3;
  } else if ((sw & SW2)!=0) {                       // 2 番のスイッチが押された
    num = 2;
  } else if ((sw & SW1)!=0) {                       // 1 番のスイッチが押された
    num = 1;
  }
  return num;
}
      
//-----------------------------------------------------------------------------
// 画面表示
//-----------------------------------------------------------------------------


//グローバル変数の定義
int volume = 3; 
int speed = 3;   
int currentFont = 0;
//曲選択画面
int listOffset2 = 0;   
int listOffset3 = 0;  
int listOffset4 = 0;  


void asta(int y) {
  locateXY(0, y);
  putCh('>', currentFont);
}

//現在の曲のインデックスを取得
int currentListIndex(int scr, int kersol) {
  int off = 0;
  if (scr == 2)       off = listOffset2;
  else if (scr == 3)  off = listOffset3;
  else if (scr == 4)  off = listOffset4;
  return off + (kersol - 2) + 1;
}


void demoScreen(int screenId, int kersol, int SongIndex) {
  cls(currentFont);   // LCDをクリアする
  char[][] scr = screen(chr(screenId));
  if (scr == null) return;

  int off = 0;
  if (screenId == 2)       off = listOffset2;
  else if (screenId == 3)  off = listOffset3;
  else if (screenId == 4)  off = listOffset4;


  for (int row = 0; row < 8; row = row + 1) {
    if (row == 0) {
      locateXY(0, row);       // タイトル行は左端から表示
      putStr(scr[row], currentFont);
    } else {
      locateXY(1, row);       // それ以外の行は1マス開けて表示
      putStr(scr[row], currentFont);
    }
    // 2. 3. 4.曲選択画面でBack以降に曲一覧を表示
    if ((screenId == 2 || screenId == 3 || screenId == 4) && row >= 2) {
        int idx = off + (row - 2) + 1;          // 実際の曲インデックス
        char[] name = mp3FilesGetName(idx);
        if (name != null) {
            locateXY(1, row);
            putStr(name, currentFont);
        }
    }
    // 5. 6. 7.曲再生画面で速度と音量を表示
    if ((screenId == 5 && row == 5) || (screenId == 6 && row == 5) || (screenId == 7 && row == 5)) {  
      locateXY(8, 4);                  
      putDec(speed, 1, currentFont); 
      locateXY(8, 5);                  
      putDec(volume, 1, currentFont);                                  
    }      
  }
  // 5. 6. 7.曲再生画面で現在再生中の曲名を表示
  if (screenId==5 || screenId==6 || screenId==7){
    locateXY(0, 0);
    putStr(mp3FilesGetName(SongIndex), currentFont);
  }
  // 現在のカーソル位置を表示
  asta(kersol);
}


//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
public void shellMain() {
  int kersol = 1;
  int PlayStopFlag = 1;
  int SongIndex = 1;
  int currentScreen = 0;
  boolean volSelect = false;     
  boolean speedSelect = false;                           

  spiResetLcd();      // sleepを使用するので
  spiResetMp3();      // プロセスが実行する
  mp3FilesInit();     // ファイル一覧を作る
  demoScreen(currentScreen, kersol, SongIndex);

  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);

    // 音量調節
    if (volSelect) {
      if (num == 1 && volume < 5){ // Volume up
        volume = volume + 1;
        
        spiWriteMp3Reg(0x0b, (5 - volume) * 0x1010);
        demoScreen(currentScreen, kersol, SongIndex);
      } 
      else if (num == 5 && volume > 1) {  // Volume down
        volume = volume - 1;
        spiWriteMp3Reg(0x0b, (5 - volume) * 0x1010);
        demoScreen(currentScreen, kersol, SongIndex);
      } 
      else if (num == 3) {
      volSelect = false;
      }
    }
    // 速度調節
    else if (speedSelect) {
      if (num == 1 && speed< 5){ // speedup
        speed= speed+ 1;
        spiWriteMp3Reg(0x03, (5 - speed) * 0x186A);
        demoScreen(currentScreen, kersol, SongIndex);
      } else if (num == 5 && speed> 1) {  // speeddown
        speed= speed- 1;
        spiWriteMp3Reg(0x03, (5 - speed) * 0x186A); 
        demoScreen(currentScreen, kersol, SongIndex);
      } else if (num == 3) {
      speedSelect = false;
      }
    }

    //カーソルの上下移動の定義
    else if (num == 1) {
        if (kersol == 2 && currentScreen == 2 && listOffset2 > 0) {
            listOffset2 = listOffset2 - 1;
            demoScreen(currentScreen, kersol, SongIndex);
        }
        else if (kersol == 2 && currentScreen == 3 && listOffset3 > 0) {
            listOffset3 = listOffset3 - 1;
            demoScreen(currentScreen, kersol, SongIndex);
        }
        else if (kersol == 2 && currentScreen == 4 && listOffset4 > 0) {
            listOffset4 = listOffset4 - 1;
            demoScreen(currentScreen, kersol, SongIndex);
        }
        else if (kersol > 1) {          // 通常の 1 行上移動
            kersol = kersol - 1;
            demoScreen(currentScreen, kersol, SongIndex);
        }
        if ((currentScreen == 2 || currentScreen == 3 || currentScreen == 4) &&
            kersol >= 2) {
            SongIndex = currentListIndex(currentScreen, kersol);
        }
    }

    else if (num == 5) {
      /* ---- 一番下の場合，最初へジャンプ ---- */
      if (kersol == 7 && currentScreen == 2 &&
          mp3FilesGetName(listOffset2 + 6 + 1) == null) {  
          listOffset2 = 0;
          kersol = 2;
          demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 7 && currentScreen == 3 &&
          mp3FilesGetName(listOffset3 + 6 + 1) == null) {
          listOffset3 = 0;
          kersol = 2;
          demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 7 && currentScreen == 4 &&
          mp3FilesGetName(listOffset4 + 6 + 1) == null) {
          listOffset4 = 0;
          kersol = 2;
          demoScreen(currentScreen, kersol, SongIndex);
      }

      /* ---- スクロール ---- */
      else if (kersol == 7 && currentScreen == 2 &&
          mp3FilesGetName(listOffset2 + 6 + 1) != null) {
          listOffset2 = listOffset2 + 1;
          demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 7 && currentScreen == 3 &&
          mp3FilesGetName(listOffset3 + 6 + 1) != null) {
          listOffset3 = listOffset3 + 1;
          demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 7 && currentScreen == 4 &&
          mp3FilesGetName(listOffset4 + 6 + 1) != null) {
          listOffset4 = listOffset4 + 1;
          demoScreen(currentScreen, kersol, SongIndex);
      }

      /* ---- 1 行下移動 ---- */
      else if ( (kersol < 7 && currentScreen > 0) ||
                (kersol < 5 && currentScreen == 0) ) {
          kersol = kersol + 1;
          demoScreen(currentScreen, kersol, SongIndex);
      }
      if ((currentScreen == 2 || currentScreen == 3 || currentScreen == 4) &&
          kersol >= 2) {
          SongIndex = currentListIndex(currentScreen, kersol);
      }
    }


    // ストップボタン（曲再生中）
    else if (num == 6) {
      dbgPutStr("stop\n");
      stop();
    }
    // 戻るボタンの定義
    else if (num == 4) {
      if (currentScreen == 1) {
        currentScreen = 0; 
      } else if (currentScreen == 2) {
        currentScreen = 1;
        listOffset2 = 0; 
      } else if (currentScreen == 3) {
        currentScreen = 1;
        listOffset3 = 0; 
      } else if (currentScreen == 4) {
        currentScreen = 1;
        listOffset4 = 0; 
      } else if (currentScreen == 5) {
        currentScreen = 2;  
      } else if (currentScreen == 6) {
        currentScreen = 3; 
      } else if (currentScreen == 7) {
        currentScreen = 4;
      } else if (currentScreen == 8) {
        currentScreen = 0;
      } else if (currentScreen == 9) {
        currentScreen = 0;
      } else if (currentScreen == 10) {
        currentScreen = 0;
      } else if (currentScreen == 11) {
        currentScreen = 10;
      } else if (currentScreen == 12) {
        currentScreen = 0;
      }
      demoScreen(currentScreen, kersol, SongIndex);
      kersol = 1;
    }

  // 決定ボタンの処理
  else if (num == 3) {
  /* =========================
  currentScreen == 0 : Menu
  ========================= */
    if (currentScreen == 0) {
      if (kersol == 1) {                 // Play songs
        currentScreen = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 2) {            // Edit PlayList
        currentScreen = 9;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 3) {            // Tag
        currentScreen = 10;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 4) {            // Format
        currentScreen = 12;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 5) {            // Help
        currentScreen = 8;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  /* =========================================
  currentScreen == 1 : Play-songs サブメニュー
  ========================================= */
    else if (currentScreen == 1) {
      if (kersol == 1) {                 // Song selection
        currentScreen = 2;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 2) {            // History
        currentScreen = 3;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 3) {            // PlayList
        currentScreen = 4;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 4) {            // Back
        currentScreen = 0;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  /* ==============================
  currentScreen == 2 : Song list
  ============================== */
    else if (currentScreen == 2) {
      listOffset2 = 0;
      if (kersol == 1) {                 // Back
        currentScreen = 1;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else {                             // Play selected song
        currentScreen = 5;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  /* =============================
  currentScreen == 3 : History
  ============================= */
    else if (currentScreen == 3) {
      listOffset3 = 0;
      if (kersol == 1) {                 // Back
        currentScreen = 1;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else {                             // Play from history
        currentScreen = 6;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  /* ==============================
  currentScreen == 4 : PlayList
  ============================== */
    else if (currentScreen == 4) {
      listOffset4 = 0; 
      if (kersol == 1) {                 // Back
        currentScreen = 1;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else {                             // Play from playlist
        currentScreen = 7;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  /* =====================================
  currentScreen == 5 : Playing a track
  ===================================== */
    else if (currentScreen == 5 || currentScreen == 6 || currentScreen == 7) {
      if (kersol == 1) {                 // Play / Stop
        if (PlayStopFlag == 1) {
          play(mp3FilesGetPath(SongIndex));
          char[] fname = mp3FilesGetName(SongIndex);
          PlayStopFlag = 0;
        } else {
          dbgPutStr("stop\n");
          stop();
          PlayStopFlag = 1;
        }
      }
      else if (kersol == 2 && mp3FilesGetName(SongIndex + 1) != null) { // Next
        stop();
        SongIndex = SongIndex + 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 3 && SongIndex > 1) {   // Previous
        stop();
        SongIndex = SongIndex - 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 4) {             // Speed
        speedSelect = true;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 5) {             // Volume
        volSelect = true;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol == 6) {             // Back to song list
        if (currentScreen == 5) currentScreen = 2;
        if (currentScreen == 6) currentScreen = 3;
        if (currentScreen == 7) currentScreen = 4;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  /* =========================
  currentScreen == 8 : Help
  ========================= */
    else if (currentScreen == 8) {
      if (kersol == 1) {                  // Back
        currentScreen = 0;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  /* =================================
  currentScreen == 9 : Playlist edit
  ================================= */
    else if (currentScreen == 9) {
      if (kersol == 1) {                  // Back
        currentScreen = 0;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  /* ============================
  currentScreen == 10 : Tag menu
  ============================ */
    else if (currentScreen == 10) {
      if (kersol == 1) {                  // Back
        currentScreen = 0;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else {                              // Tag edit
        currentScreen = 11;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  /* ==============================
  currentScreen == 11 : Tag edit
  ============================== */
    else if (currentScreen == 11) {
      if (kersol == 1) {                  // Back
        currentScreen = 10;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  /* ==============================
  currentScreen == 12 : Format
  ============================== */
    else if (currentScreen == 12) {
      if (kersol == 1) {                  // Back
        currentScreen = 0;
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (kersol >= 2 && kersol <= 7) { // Font choice
        currentFont = kersol - 2;         // 0 〜
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

  } 



    sleep(10);
  }
}
