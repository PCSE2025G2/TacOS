/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 *
 */
#include <kernel.hmm>
#include <util.hmm>
#include "lcd.hmm"
#include "mp3Proc.hmm"
#include "spi.hmm"
#include "Files.hmm"
#include "shellProc.hmm"
#include "screen.hmm"
#include "format.hmm"
#include "playlist.hmm"
#include "tag.hmm"

//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)

int readSw() {
  int sw = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
  int swd = sw & sw0;                               // デバウンス
  int sw2 = (sw1 ^ swd) & swd;                      // 今回，新たに押されたSW
  sw0 = sw;
  sw1 = swd;
  return sw2;
}

int swToNum(int sw) {
  int num = -1;
  if ((sw & SW6)!=0) {                              // 6 番のスイッチが押された
    num = 6;
  } else if ((sw & SW5)!=0) {                       // 5 番のスイッチが押された
    num = 5;
  } else if ((sw & SW4)!=0) {                       // 4 番のスイッチが押された
    num = 4;
  } else if ((sw & SW3)!=0) {                       // 3 番のスイッチが押された
    num = 3;
  } else if ((sw & SW2)!=0) {                       // 2 番のスイッチが押された
    num = 2;
  } else if ((sw & SW1)!=0) {                       // 1 番のスイッチが押された
    num = 1;
  }
  return num;
}
      
//-----------------------------------------------------------------------------
// 画面表示
//-----------------------------------------------------------------------------
void asta(int y) {
  locateXY(0, y);
  putCh('>');
}

/*
void demoScreen(int kersol) {
  cls();                                            // LCDをクリアする
  locateXY(0,0); putStr("MP3 Player demo");
  asta(kersol);
  for (int i = 1; i <= 5; i = i + 1)
  { // スイッチ1〜5に付いて
    locateXY(2,i+1);
    putCh(chr(ord('0')+i));                         // スイッチの番号
    putStr(":");
    char[] fname = mp3FilesGetName(i);              // 対応するファイル名
    if (fname!=null) putStr(fname);
  }
  locateXY(2,7);
  putStr("6:stop");                                 // 6番のスイッチ
}
*/

void demoScreen(int screenId, int kersol, int SongIndex) {
  cls();   // LCDをクリアする
  char[][] scr = screen(chr(screenId));
  if (scr == null) return;

  for (int row = 0; row < 7; row = row + 1) {
    if (row == 0) {
      locateXY(0, row);       // タイトル行は左端から表示
      putStr(scr[row]);
    } else {
      locateXY(1, row);       // それ以外の行は1マス開けて表示
      putStr(scr[row]);
    }
  }
  if (screenId==3){
    locateXY(0, 0);
    putStr(mp3FilesGetName(SongIndex));
  }


  asta(kersol);
}





//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
public void shellMain() {
  int kersol = 1;
  int PlayStopFlag = 1;
  int SongIndex = 1;
  int currentScreen = 0;
  spiResetLcd();      // sleepを使用するので
  spiResetMp3();      //   プロセスが実行する
  mp3FilesInit();     // ファイル一覧を作る
  demoScreen(currentScreen, kersol, SongIndex);

  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);

    if (num == 1 && kersol > 1) {
      kersol = kersol - 1;
      demoScreen(currentScreen, kersol, SongIndex);
    }
    else if (num == 5 && kersol < 6) {
      kersol = kersol + 1;
      demoScreen(currentScreen, kersol, SongIndex);
    }
    else if (num == 6) {
      dbgPutStr("stop\n");
      stop();
    }
    else if (num == 4  && currentScreen > 0) {
      currentScreen = currentScreen - 1;  // play songs に遷移
      kersol = 1;
      demoScreen(currentScreen, kersol, SongIndex);
    }
    else if (num == 3) {
      if (currentScreen == 0 && kersol == 1) {
        currentScreen = 1;  // play songs に遷移
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (currentScreen == 1 && kersol == 1)
      {
        currentScreen = 2;  // song select に遷移
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (currentScreen == 2 && kersol == 1) {
        currentScreen = 3;  // 曲再生画面 に遷移
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (currentScreen == 3 && kersol == 1) {
        // MP3再生
        if (PlayStopFlag == 1){
          play(mp3FilesGetPath(SongIndex));
          char[] fname = mp3FilesGetName(SongIndex);
          PlayStopFlag = 0;
        }
        else{
          dbgPutStr("stop\n");
          stop();
          PlayStopFlag = 1;
        }
      }
      else if (currentScreen == 3 && kersol == 2 && mp3FilesGetName(SongIndex+1)!=null) {
        SongIndex = SongIndex + 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (currentScreen == 3 && kersol == 3 && SongIndex > 1) {
        SongIndex = SongIndex - 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
      else if (currentScreen == 1 && kersol ==4) {
        currentScreen = 0; 
        kersol = 1;
        demoScreen(currentScreen, kersol, SongIndex);
      }
    }

    sleep(10);
  }
}

