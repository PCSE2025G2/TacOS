/*
 * mp3Proc.cmm : MP3 デコーダのドライバ
 */
#include <kernel.hmm>
#include <fs.hmm>
#include "Files.hmm"
#include <util.hmm>
#include "mp3Proc.hmm"
#include "spi.hmm"
#define BUFSIZ 512                          // MP3 ファイル用のバッファ

// メッセージ
#define STOP  1                             // 再生停止要求メッセージ
#define START 2                             // 再生開始要求メッセージ

// レスポンス
#define OK  0
#define ERR 1

// ＊＊＊＊　重要！！　クライアントプロセスは一つだけの前提　＊＊＊＊
int link;                                   // メッセージ通信用のリンク
boolean syncFlag = false;                   // クライアントが同期待ちである

//-----------------------------------------------------------------------------
// クライアントプロセスが呼び出す
//-----------------------------------------------------------------------------


// 音楽再生停止
public void stop() {
  syncFlag = true;                          // データ転送プロセスをコマンド待にする
  sndrec(link, STOP, 0, 0, 0);              // 同期要求メッセージ
}

// 音楽再生
public boolean play(char[] path) {
  syncFlag = true;                          // データ転送プロセスをコマンド待にする
  int r = sndrec(link, START,
                  _AtoI(path), 0, 0);       // 再生開始メッセージ
  return r==OK;                             // 成功なら true を返す
}

//-----------------------------------------------------------------------------
// 音楽データ転送用のプロセス
//-----------------------------------------------------------------------------
// MP3 データ用のバッファ
char[] buf = array(BUFSIZ);

// 速さ 0.2×, 0.4×, 0.6×, 0.8×, 1.0× 用 CLOCKF テーブル 
int[] clockTable = { 0x57E4, 0x4E20, 0x445C, 0x3A98, 0x30D4 };

//速度調節
public void speed(int idx, int pathIdx) {          // idx:1～5
  stop();                                                 // 一度停止
  spiWriteMp3Reg(0x00, 0x0804);
  sleep(2);
  spiWriteMp3Reg(0x03, clockTable[idx - 1]);              // CLOCKF
  spiWriteMp3Reg(0x05, 0x1F40);
  sleep(2);
  play(mp3FilesGetPath(pathIdx)); // 曲を先頭から再生
}

public void volume(int idx){
  spiWriteMp3Reg(0x0b, (5 - idx) * 0x1010);
}

public int jumpMusic(int screen, int songIdx, int dir, int hisC, int[] hisL, int playC, int[] playL)
{
    /* ---------- 通常リスト (screen 5) ---------- */
    if (screen == 5) {
        if (dir > 0) {
            if (mp3FilesGetName(songIdx + 1) != null)
                return songIdx + 1;
        } else {
            if (songIdx > 1)
                return songIdx - 1;
        }
    }

    /* ---------- 履歴リスト (screen 6) ---------- */
    else if (screen == 6) {
        int i = 0;
        while (i < hisC && hisL[i] != songIdx) i = i + 1;

        if (dir > 0 && i + 1 < hisC)
            return hisL[i + 1];
        if (dir < 0 && i > 0)
            return hisL[i - 1];
    }

    /* ---------- プレイリスト (screen 7) ---------- */
    else if (screen == 7) {
        int i = 0;
        while (i < playC && playL[i] != songIdx) i = i + 1;

        if (dir > 0 && i + 1 < playC)
            return playL[i + 1];
        if (dir < 0 && i > 0)
            return playL[i - 1];
    }

    /* 移動不能 → 元の曲番号をそのまま返す */
    return songIdx;
}

// 音楽データをデコーダに送る
void trans(char[] path) {
  int fd = open(path, READ_MODE);           // ファイルをオープン
  if (fd<0) {                               // オープンできない
    send(link, ERR);                        //   クライアントにエラーを通知
    return;                                 //   コマンド待に戻る
  }
  send(link, OK);                           // クライアントに成功を通知
  int len;
  while ((len=read(fd, buf, BUFSIZ))>0) {   // データをファイルから読み
    spiWriteMp3Dat(buf, len);               //   MP3デコーダにデータを送る
    if (syncFlag) break;                    //   クライアントが待っている
  }
  spiFlushMp3();                            // デコーダLSIのバッファをクリアし
  close(fd);                                // ファイルをクローズ
}

// mp3Main は，プロセスのメインルーチンとしてカーネルに登録しておく．
// ここからプロセスの実行が始まる
public void mp3Main() {
  link = newLink();                         // クライアント待受用のリンク
  for (;;) {
    Link l=receive(link);                   // クライアントから受信待ち
    syncFlag = false;                       // クライアント停止中にフラグ操作
    if (l.op==STOP) {
      send(link, OK);                       // クライアントを再開する
    } else if (l.op==START) {
      trans(_ItoA(l.prm1));                 // ファイルからデータ転送
    }
  }
}
