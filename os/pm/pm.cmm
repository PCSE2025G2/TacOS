/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * pm/pm.cmm : プロセスマネージャ(PM)の本体、プロセスの生成と管理を行う
 *
 * 2020.09.06 : zmbProc， waitChild を kernel から移動（追加）
 * 2020.08.15 : sleep システムコールを kernel に移動（削除）
 * 2019.12.29 : メモリ保護に対応
 * 2019.11.18 : errno.hmm をインクルードするように変更
 * 2019.01.27 : I/O特権モード追加
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2017.12.27 : プログラムの体裁を整える
 * 2016.01.12 : copyArgs() の argc を廃止
 * 2016.01.02 : sleep システムコールを追加
 * 2015.12.01 : readTextData() を修正
 * 2015.10.01 : exit() のクローズ忘れの確認を変更
 * 2015.11.17 : exec() でプロセスの FDS 領域を確保するように変更
 * 2015.11.16 : copyArgs()にargv参照配列位置を指すアドレスを追加、nullを格納
 * 2015.09.08 : dispatcher.h のインクルード廃止, codeCpy() 廃止(重村)
 * 2015.09.07 : バイト・ワード単位でファイルから読み出す仕組み
 *              openByte(), getByte(), getWord(), closeByte() を追加
 *              length() 廃止し strlen() を使用するように変更
 *              strncpy() のかわりに strcpy() を使用するように変更(重村)
 * 2015.09.05 : newProc()後、PCBの初期化が完了して schProc() を呼ぶように(重村)
 * 2015.09.03 : receive() が LINK を返すので getLink() の使用を中止(重村)
 * 2015.08.20 : strcopy() を util.cmm に移植、strcpy() を codeCpy() に改称
 * 2015.08.19 : 定数の定義を exeFile.h に移植
 * 2015.06.30 : exec ルーチン内にコマンド行引数の設定を実装
 * 2015.06.04 : ユーザモード時のスタックサイズは EXE ファイルの
 *              ヘッダから取得するように変更
 * 2015.05.27 : IPC のセマフォ使用化による変更
 *              (ランデブ内クライアント PCB 取得、exit ルーチン）
 * 2015.05.22 : exit と wait を修正(すぐに結果を返し、wait ルーチンを繰り返す)
 * 2015.05.08 : システムコールの種類を示す #define を syscall.h に移植
 * 2015.04.30 : wait システムコールを実装
 * 2015.04.27 : exit システムコールを実装
 * 2015.04.24 : プロセス生成の際プロセスのメモリ領域と
 *              PCB 領域の2つに分けてメモリを確保するように変更
 * 2015.04.21 : exec システムコールを実装
 * 2015.03.18 : プロセス毎のスタックをユーザモード用と
 *              カーネルモード用に分けたことによる修正
 * 2015.03.10 : sysExec() からカーネル内の empProcNum() の呼び出しを廃止
 * 2015.02.11 : 村田開発開始
 */

#include <errno.hmm>
#include <util.hmm>
#include <kernel.hmm>
#include <dispatcher.hmm>
#include <syscall.hmm>
#include <mm.hmm>
#include <fs.hmm>
#include <errno.hmm>
#include "pm.hmm"
#include "exeFile.hmm"


// PM は単一プロセスで実行されるので、ほとんどのグローバル変数アクセスで
// 排他を気にしなくて良い

//-----------------------------------------------------------------------------
// セクタ単位ではなくバイト、ワード単位のread(getByte(), getWord())を提供する
//-----------------------------------------------------------------------------
int[] buf = array(1);                               // ここにセクタ単位で読込む
int fd      = -1;                                   // FS で使用する FD
boolean eof = true;                                 // EOF に達したか
int bufLen  = 0;                                    // buf 中の有効なバイト数
int bufPtr  = -1;                                   // buf 中のバイト位置
/*
// オープン
int openByte(char[] path) {
   fd = open(path, READ_MODE);                      // FS のシステムコールは
   if (fd<0) return -1;                             //   セクタ単位
   eof = false;
   bufLen = 0;                                      // bufLen を初期化
   bufPtr = -1;                                     // bufPtr を初期化
   return 0;
}

// バイト単位の read
char getByte() {
  if (eof) return '\0';
  bufPtr = bufPtr + 1;
  if (bufPtr>=bufLen) {
    bufLen = read(fd, buf, BLKSIZ);
    if (bufLen<=0) {
      eof = true;
      return '\0';
    }
    bufPtr = 0;
  }
  return buf[bufPtr];
}
*/
// ワード単位の read (EXE ファイル用なのでビッグエンディアンとして処理する)
int getWord() {
  read(fd, buf, 2);
  return buf[0];
}
/*
// クローズ
void closeByte() {
  eof = true;
  close(fd);
}
*/
//-----------------------------------------------------------------------------
// exec システムコール
//-----------------------------------------------------------------------------
// プロセスを生成する
//   プロセスのメモリ領域の配置は以下の順（二つに分けて確保する）
//     テキスト→ データ→ BSS → ユーザスタック(メモリ空間)
//     PCB → カーネルスタック                  (プロセスデータ)
//   EXE ファイルは FAT ファイルシステムと違い、ビッグエンディアンである

// EXE ファイルのヘッダから読みだしたデータ
int magic;                                          // マジック番号
int textSiz;                                        // TEXT セグメントサイズ
int dataSiz;                                        // DATA セグメントサイズ
int bssSiz;                                         // BSS  セグメントサイズ
int relSiz;                                         // 再配置情報のサイズ
int stkSiz;                                         // ユーザスタックサイズ


// EXE ファイルのヘッダから上記のデータを読み出す
int readHeader() {
  magic   = getWord();                              // マジック番号
  if (magic!=UMAGIC && magic!=IMAGIC)               // マジック番号をチェック
    return EMAGIC;                                  //   不正なマジック番号
  textSiz     = getWord();                          // TEXT セグメントサイズ
  dataSiz     = getWord();                          // DATA セグメントサイズ
  bssSiz      = getWord();                          // BSS  セグメントサイズ
  relSiz      = getWord();                          // 再配置情報のサイズ
  stkSiz      = getWord();                          // ユーザスタックサイズ
  if (eof) return ENOEXEC;                          // ファイルが短い
  return 0;                                         // 正常終了
}

// プロセスのメモリ空間の物理アドレス
int pText;                                          // TEXTセグメントのアドレス
int pData;                                          // DATAセグメントのアドレス
int pBss;                                           // BSS セグメントのアドレス
int pUsp;                                           // ユーザスタックの底
int pEnd;                                           // 空間最後のアドレス
/*
// プロセスのメモリ空間を割り当てる
int allocMem() {
  int procSiz = textSiz+dataSiz+bssSiz+stkSiz;      // メモリ空間サイズ
  pText = _AtoI(malloc(procSiz));                   // メモリ空間を確保
  if (pText==0) return ENOMEM;                      // malloc できなかった
  pData = pText + textSiz;                          // DATAセグメントのアドレス
  pBss  = pData + dataSiz;                          // BSS セグメントのアドレス
  pUsp  = pBss  + bssSiz + stkSiz;                  // ユーザスタックの底(暫定)
  pEnd  = pUsp;                                     // 空間最後のアドレス
  return 0;                                         // 正常終了
}

// TEXT セグメントと DATA セグメントをメモリに読み込む
int readTextData() {
  for (int pAdr=pText; _uCmp(pAdr,pBss)<0; pAdr=pAdr+1) {// TEXTとDATA について
    MEM[pAdr] = getByte();                          //  ファイルから読んで格納
    if (eof) return ENOEXEC;                        //  ファイルが短い
  }
  return 0;                                         // 正常終了
}
*/
#define V(pcb, page) (pcb.pageTable[(page)*2+1]>>15)  //　ページテーブルのエントリのVビット
#define FRAME(pcb, page) (pcb.pageTable[(page)*2+1]&0x00ff) //　フレーム番号

//　仮想アドレスを物理アドレスに変換する
void[] _VtoP(void[] a, PCB pcb){                   
  int page = _AtoI(a)/PAGESIZ;                      //　アドレスをページ番号に変換
  int adr = _AtoI(a)%PAGESIZ;                       //　アドレスaの下位8ビット取り出し
  if(V(pcb, page)==0) return null;                  //  変換できなかった
  return  _ItoA((FRAME(pcb, page)*PAGESIZ)|adr);    //　アドレスに変換して返す
}

//　指定したアドレスの1バイトを返す
char peekB(void[] a, PCB pcb){
  char[] adr = _VtoP(a,pcb);                        //　アドレスaを物理アドレスに変換
  if(adr==null){                                    //　フレームに変換できなかったら
    panic("no frame");
  }
  return adr[0];                                    //　アドレスの中身1バイトを返す
}

//　指定したアドレスの1ワードを返す
int peekW(void[] a, PCB pcb){
  int[] adr = _VtoP(a,pcb);                         //　アドレスaを物理アドレスに変換
  if(adr==null){                                    //　フレームに変換できなかったら
    panic("no frame");
  }
  return adr[0];                                    //　1ワード(2バイト)を返す
}

//　変換できなかったページのフレームを割り当ててページテーブルに記憶する
void[] pFault(void[] a, PCB pcb){
    int num = allocFrame();                         //　フレームを割り当て
    if(num < 0) panic("no frame");
    int page = _AtoI(a)/PAGESIZ;                    //　ページ番号
    pcb.pageTable[page*2] = 0x80;                   //　Vビットを1にする
    pcb.pageTable[page*2+1] = num;                  //　フレーム番号をページテーブルに記憶
    return _ItoA(num*PAGESIZ);                      //　アドレスに変換して返す
}

//　指定したアドレスに1バイト書き込む
void pokeB(void[] a, char c, PCB pcb){
  char[] adr = _VtoP(a,pcb);                        //　アドレスaを物理アドレスに変換
  if(adr==null){                                    //　フレームに変換できなかったら
    adr = pFault(a, pcb);                           //  フレームを割り当てページテーブルに記憶
  }
  adr[0] = c;                                       //　アドレスに1バイトの文字列を書き込む
}

//　指定したアドレスに1ワード書き込む
void pokeW(void[] a, int word,PCB pcb){
  int[] adr = _VtoP(a,pcb);                         //　アドレスaを物理アドレスに変換
  if(adr==null){                                    //　フレームに変換できなかったら
    adr = pFault(a, pcb);                           //  フレームを割り当てページテーブルに記憶
  }
  adr[0] = word;                                    //  アドレスに1ワード格納
}

// 文字列をコピーする　ppcb:親プロセスのpcb、cpcb:子プロセスのpcb
void strCpyVP(void[] dst, void[] src, PCB pPcb, PCB cPcb){
  char c;
  // '\0'になるまで文字列をコピーする
  for(int i=0;(c=peekB(_ItoA(_AtoI(src)+i),pPcb))!='\0';i=i+1){
    pokeB(_ItoA(_AtoI(dst)+i),c,cPcb);
  }
}

//　スワップイン
void swapIn(void[] adr, PCB pcb, int fnum){
  int r = 0;                                        // 実行結果
  int page = _AtoI(adr)/PAGESIZ;                    //　スワップインするアドレスのページ番号
  int[] fadr = _ItoA(fnum*PAGESIZ);                 //　フレーム番号からアドレスを求める
  int fd = pcb.filedsc;                             //　pcbのexeファイルのファイルディスクリプタ
  r = seek(fd, 0, page*PAGESIZ+PAGESIZ);            // 入力を指定のアドレスまでSeek
  if(r<0) panic("seek error");
  r = read(fd, fadr, PAGESIZ);                      //　ページ単位のコピー
  if(r<0) panic("read error");
}

// スタックに文字列の配列をコピーする (返り値: strAdr)
int copyCA(int[] USP, int index, int strAdr, char[][] ary, int size, PCB pPcb, PCB cPcb) {
  for (int i=0; i<size; i=i+1) {                    // すべての要素について
    USP[index + i] = strAdr;                        //   参照配列位置格納
    char[] str = _AtoP(ary[i], pPcb);               //   文字列の実体を取得
    strCpyVP(_ItoA(pText+strAdr), str, pPcb, cPcb); //   文字列をコピー
    strAdr = strAdr + strLen(str) + 1;              //   文字列格納位置を進める
  }
  USP[index + size] = 0x0000;                       // null を格納
  return strAdr;
}

// スタックの底に argc, argv, envp, argv[0], ... を格納する
void copyArgsEnvp(char[][] argv, char[][] envp, PCB pPcb, PCB cPcb) {
  // 注意: argv, envp は論理アドレスの配列
  // スタックの底に確保する領域のサイズを計算する
  int st = 2 + 2 + 2 + 2 + 2;                       // 文字列以外
  int argc = 0;                                     // コマンド行引数の個数
  while (argv!=null && argv[argc]!=null) {          // コマンド行引数について
    st = st + strLen(_AtoP(argv[argc],pPcb))+1+2;   //  argv 配列と文字列の領域
    argc = argc + 1;                                //   サイズを合計していく
  }
  int envs = 0;                                     // 環境変数の個数
  while (envp!=null && envp[envs]!=null) {          // 環境変数について
    st = st + strLen(_AtoP(envp[envs],pPcb))+1+2;   //  envp 配列と文字列の領域
    envs = envs + 1;                                //   サイズを合計していく
  }
  pUsp = pUsp - ((st+1) & ~1);                      // スタックの終了位置調整

  // スタックの底に確保した領域に argc, argv, envp, ... を書込む
  int[] USP = _ItoA(pUsp);                          // スタックを表現する配列
  int argvAdr = pUsp - pText + 2 + 2 + 2;           // argv 配列の論理アドレス
  int envpAdr = argvAdr + 2*argc + 2;               // envp 配列の論理アドレス
  int strAdr  = envpAdr + 2*envs + 2;               // 文字列の論理アドレス

  USP[0] = argc;                                    // argc 格納
  USP[1] = argvAdr;                                 // argv 参照配列の位置
  USP[2] = envpAdr;                                 // envp 参照配列の位置

  int index = 3;                                    // 配列のインデックス

  // argv の格納
  strAdr = copyCA(USP, index, strAdr, argv, argc, pPcb, cPcb);
  index = index + argc + 1;
  // envp の格納
  strAdr = copyCA(USP, index, strAdr, envp, envs, pPcb, cPcb);
}

// ページテーブルと参照しているフレームを解放する
void freePageTable(PCB pcb){
  int[] pageTable = pcb.pageTable;
  int entry;
    for(int num;num<256;num=num+2){
      entry = V(pcb, num);
      if(entry==1){
        entry = pageTable[num+1];
        freeFrame(entry);
      }
    }
  int pageFrame = _AtoI(pcb.pageTable);
  pageFrame = pageFrame/PAGESIZ;
  freeFrame(pageFrame);
}

// exec システムコールの処理をする
int sysExec(char[] path, char[][] argv, char[][] envp, PCB pcb) {
  // PCB を確保・初期化し新しいプロセスを実行可能にする
  int pcbSize = sizeof(PCB)+P_KERN_STKSIZ          // PCB とカーネルスタック
                +P_FILE_MAX*sizeof(int);           //   FDの一覧表の領域
  PCB newPcb = malloc(pcbSize);                    // PCBを確保
  if (newPcb==null) {                              //   エラー発生
    free(_ItoA(pText));
    return ENOMEM;
  }
    //ページテーブルを確保する
   int pageFrame = alloc2Frame();
   if(pageFrame < 0){                              // 空きフレームが無かったら
      return ENOMEM;                               // エラー発生
   }
   int pageTableAdr = pageFrame * PAGESIZ;         // フレーム番号をアドレスの上位ビットに
   newPcb.pageTable = _ItoA(pageTableAdr);         //　PCBにページテーブルのアドレス
   int[] pageTable = _ItoA(pageTableAdr);
   for(int num=0;num<256;num=num+1){               //　ページテーブルを初期化
      pageTable[num*2] = 0;
      pageTable[num*2+1] = 0;
   }
  // コマンド行引数を親プロセスから子プロセスのユーザスタックにコピーする
  copyArgsEnvp(argv, envp, pcb, newPcb);

  int fd;                                          // オープンの実行結果
  fd = open(path, READ_MODE);                      // EXE ファイルをオープン
  if(fd<0){                                         //   見つからなかった 
    freePageTable(newPcb);
    return ENOEXEC;
  }
  newPcb.filedsc = fd;   
  int r;                                           // 実行結果    
 if ((r=readHeader())!=0) {                        // ヘッダを読む
    close(fd);                                     //   エラー発生
    freePageTable(newPcb);
    return r;
  }
  newPcb.textSiz = textSiz;                       // テキストとデータセグメントの
  newPcb.dataSiz = dataSiz;                       // 　サイズを記憶する

  int[] fds = _ItoA(_AtoI(newPcb)+sizeof(PCB)+P_KERN_STKSIZ);

  int priv = EI|USER;                              // 普通はユーザモード
  if (magic==IMAGIC) priv = EI|IPRV;               // I/O特権モード
  newProc(0,pcb.enice,pUsp-pText,priv,newPcb,fds); // PCB 等初期化
  newPcb.parent  = pcb;                            // 親プロセスを設定
  schProc(newPcb);                                 // プロセスを実行可能に
  return newPcb.pid;                               // PID を返す
}

//-----------------------------------------------------------------------------
// プロセスマネージャーの本体(ここで各システムコールを実行する)
//-----------------------------------------------------------------------------


int pmSysCall(int op, int prm1, int prm2, int prm3, PCB pcb) {
  int r = -1;
  if (op==EXEC) { // exec(path,argv,envp,parent)
    r = sysExec(_ItoP(prm1, pcb), _ItoP(prm2, pcb), _ItoP(prm3, pcb), pcb);
  } else
    r = -1;                                         // どれでもなければエラー
  return r;
}

// プロセスマネージャサーバのメインルーチン
public void pmMain() {
  pmLink = newLink();                               // リンクを生成する
  while (true) {                                    // システムコールを待つ
    Link l = receive(pmLink);                       // システムコールを受信
    int r=pmSysCall(l.op,l.prm1,l.prm2,l.prm3,l.client);// システムコール実行
    send(pmLink, r);                                // 結果を返す
  }
}

//-----------------------------------------------------------------------------
// ユーザプロセスのシステムコール入口
//   以下は、ユーザプロセスのコンテキストで実行されるので、
//   原則 PM のグローバル変数にアクセスしてはならない
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// exec システムコールはサーバプロセスに処理させる
//-----------------------------------------------------------------------------
public int exec(char[] path, char[][] argv, char[][] envp) {
  int r=sndrec(pmLink,EXEC, _AtoI(path), _AtoI(argv), _AtoI(envp));
  return r;                                         // 新しい子の PID を返す
}

//-----------------------------------------------------------------------------
// exit システムコールはユーザプロセスが自ら処理する（ユーザプロセスのコンテキストで実行）
//-----------------------------------------------------------------------------
// 現在のプロセスの子プロセスの PCB を返す(割込み禁止で呼出す)
//   ZOMBIE の子プロセスがあれば優先的に選択しそれの PCB を返す
//   子プロセスが全く存在しない場合は null を返す
PCB srchChild() {
  PCB child = null;                                 // 子プロセスなし
  for(int i=0; i<PRC_MAX; i=i+1) {                  // 全てのプロセスについて
    PCB p = procTbl[i];                             //   子プロセスかチェック
    if(p!=null && p.parent==curProc) {              //     子プロセスを発見
      child = p;                                    //       子プロセスあり
      if(p.stat==P_ZOMBIE)                          //       ゾンビ(exit 済)なら
        break;                                      //         これで決定
    }
  }
  return child;
}

// 現在のプロセスをゾンビにする(カレントプロセスが exit の後半で呼出す)
void zmbProc() {
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル

  // もしタイマーが稼働中なら止める
  // if (curProc.evtCnt>0) ...  将来 alarm を実装すると必要になる？

  // 子プロセスの親を INIT に変更する
  for (int i=0; i<PRC_MAX; i=i+1) {
    PCB p = procTbl[i];                             // 全プロセスについて
    if (p!=null && p.parent==curProc)               //   自分の子プロセスなら
      p.parent = initProc;                          //     親を INIT に変更する
  }

  // もし親プロセスが先に wait していたら起こす
  if (curProc.parent.evtCnt == -1)                  // 親が wait していたら
    iSemV(curProc.parent.evtSem);                   //   V 操作で起こす

  // 自身の PCB を後片付けしプロセスを終了
  freeSem(curProc.evtSem);                          // セマフォを返却し
  delProc(curProc);                                 // 実行可能列から外す
  curProc.stat = P_ZOMBIE;                          // ゾンビに変更
  yield();                                          // CPUを解放する
  panic("zmbProc");                                 // ゾンビが生き返った
}

public void exit(int status) {
  for (int i=0; i<P_FILE_MAX; i=i+1)                // クローズ忘れがあれば
    if (curProc.fds[i]!=-1) close(i);               //   クローズする

  //free(curProc.memBase);                          // メモリ空間を解放
  curProc.exitStat = status;                        // 終了ステータスを格納
  zmbProc();                                        // 自身をゾンビにする
  //panic("exit");  ここは実行されない
}

//-----------------------------------------------------------------------------
// wait システムコールはユーザプロセスが自ら処理する（ユーザプロセスのコンテキストで実行）
//-----------------------------------------------------------------------------
// 終了した子プロセスを見つけ procTbl[] から抹消した後で PCB を返す
//   子プロセスが存在しない場合は null を返す
//   自身が wait システムコールの処理から呼出す
PCB waitChild() {
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル
  PCB p = srchChild();                              // 子プロセスを探す
  if (p!=null && p.stat!=P_ZOMBIE) {                // 子プロセスあるが
    curProc.evtCnt = -1;                            //   ゾンビではない
    semP(curProc.evtSem);                           //  子プロセス待ち状態
    p = srchChild();                                //  子プロセスを探す
    if (p==null || p.stat!=P_ZOMBIE)                //  ゾンビな子が居ないのに
      panic("waitChild");                           //    起こされたら OS にバグ
  }
  if (p!=null)                                      // 子プロセスが見つかった
    procTbl[p.idx] = null;                          // エントリを削除する
  setPri(r);                                        // 割り込み状態を復元する
  return p;
}

public int wait(int[] sta) {
  sta = _AtoP(sta, curProc);                        // 物理アドレスに変換
  int r = ECHILD;                                   // 一旦、エラー番号を設定
  PCB child = waitChild();                          // 子プロセスの終了を待つ
  if (child!=null) {                                // 子プロセスが終了した
    sta[0] = child.exitStat;                        //   終了ステータスをコピー
    r = child.pid;                                  //   free する前に記録
    free(child);                                    //   PCB 領域を解放する
  }
  return r;                                         // 終了したプロセスの PID
}
