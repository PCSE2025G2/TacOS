/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * kernel/kernel.hmm : kernel.cmm の外部インタフェース
 *
 * 2020.09.06 : zmbProc，waitChild 関数削除， iSemV 関数追加
 *            : curProc, Queue 変数 process.hmm に移動
 * 2020.08.15 : 組み込み版に対応
 * 2020.08.15 : sleep システムコールを pm から移動（追加）
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2015.11.17 : newProc() の引数を追加
 * 2015.09.06 : tmrRst() を廃止(重村)
 * 2015.09.04 : getPid(), schProc() 追加、parentToInit() 削除(重村)
 * 2015.09.03 : freeSem() 追加, getLink() 削除, receive() が LINK を返す(重村)
 * 2015.06.04 : tty.h のインクルードを追加
 * 2015.05.27 : getSem() を追加
 * 2015.05.22 : retChildCode() から retChildPcb() に変更、 delProcEnt() を追加
 * 2015.04.30 : retChildCode() を追加
 * 2015.04.28 : getLinkPara() を追加
 * 2015.04.27 : tmrRst() と parntToInit() を追加
 * 2015.03.23 : newProc() の引数を削除
 *             (カーネルモード用スタックサイズは引数から define に変更）
 * 2015.03.17 : newProc() の引数を追加（USP の初期値と FLAG の初期値）
 * 2015.03.10 : プロセス毎のファイルオープン制御に関する関数の宣言を FS に移植
 * 2015.02.25 : プロセス毎のファイルオープン制御に関する関数の宣言を追加
 * 2014.08.27 : mem.h のインクルードを追加
 * 2014.06.11 : receive() の引数変更、 getLink() 追加
 * 2014.06.03 : IPC をファイルシステムに対応するように変更
 * 2014.02.11 : pm.h のインクルードを追加
 * 2014.05.28 : IPC に関する関数を追加
 * 2014.05.16 : process.h の二重定義を防ぐ方法を追加
 * 2014.05.12 : process.h のインクルードを追加
 * 2014.05.09 : newProc() の引数を追加(静的にメモリ確保)
 * 2014.05.08 : 村田開発開始
 * 2013.05.20 : ファイル名を変更(syscall.h -> kernel.h)
 * 2013.05.20 : ファイルシステムのサービスを ../fatFs/fsServ.h へ移動
 * 2011.05.20 : 新規作成
 *
 * $Id$
 *
 */

#include "process.hmm"

#define PAGESIZ 256
#define TOTALPAGE 256
#define LASTPAGE 255

/*----------------------------------------------------------------------------
 * プロセスをスケジューリングする(実行可能列に登録する)
 *   名前   : schProc
 *   引数   : PCB proc  スケージューリングするプロセス
 *   解説   : schProc は、プロセスを実行可能列に登録する
 */
public void schProc(PCB proc);

/*----------------------------------------------------------------------------
 * 自プロセスの PID を取得する
 *   名前   : getPid
 *   戻り値 : int プロセス番号
 *   解説   : getPid は、呼び出したプロセス自身の PID を返す
 */
public int getPid();

/*----------------------------------------------------------------------------
 * プロセスを初期化する
 *   名前   : newProc
 *   戻り値 : なし
 *   引数   : int start  プロセスの実行開始アドレス
 *            int nice   プロセスの優先度(0:最高優先度、P_LOW_PRI:最低優先度)
 *            int usp    プロセスのユーザモードスタックポインタの初期値
 *            int flag   プロセスのCPUフラグの初期値
 *            PCB pcb    プロセスのPCB
 *            int[] fds  オープンファイルの一覧を格納する領域
 *   解説   : newProc ルーチンは、カーネルスタックと PCB を初期化する
 */
public void newProc(int start, int nice, int usp, int flag, PCB pcb, int[] fds);

/*----------------------------------------------------------------------------
 * セマフォの新規割当て
 *   名前   : newSem
 *   戻り値 : int セマフォ番号
 *   引数   : int init  セマフォの初期値
 *   解説   : newSem は使用されていないセマフォを探し初期化する
 *            初期化したセマフォの番号を返す
 */
public int newSem(int init);

/*----------------------------------------------------------------------------
 * セマフォの解放
 *   名前   : freeSem
 *   戻り値 : なし
 *   引数   : int sd  セマフォ番号
 *   解説   : freeSem はセマフォをシステムに返却する
 */
public void freeSem(int sd);

/*----------------------------------------------------------------------------
 *   名前   : semP
 *   戻り値 : なし
 *   引数   : int sd  セマフォ番号
 *   解説   : semP は指定されたセマフォに P 操作を行う
 *            値が 0 以下のセマフォに P 操作した場合、プロセスがブロックする
 */
public void semP(int sd);

/*----------------------------------------------------------------------------
 *   名前   : iSemV
 *   戻り値 : なし
 *   引数   : int sd  セマフォ番号
 *   解説   : semV は指定されたセマフォに V 操作を行う。
 *            その結果、起床したプロセスがあってもディスパッチしない
 *   注意   : 割込み禁止で呼出す
 */
public boolean iSemV(int sd);

/*----------------------------------------------------------------------------
 *   名前   : semV
 *   戻り値 : なし
 *   引数   : int sd  セマフォ番号
 *   解説   : semV は指定されたセマフォに V 操作を行う。
 *            その結果、起床したプロセスがあった場合は自動的にディスパッチャ
 *            を呼び出す。
 */
public void semV(int sd);

/*----------------------------------------------------------------------------
 *   名前   : newLink
 *   戻り値 : リンク番号
 *   引数   : なし
 *   解説   : リンクを生成する。
 */
public int newLink();

/*----------------------------------------------------------------------------
 *   名前   : receive
 *   戻り値 : LINK 構造体
 *   引数   : int num  リンク番号
 *   解説   : サーバがリンクからリクエストを受け取る.
 */
public Link receive(int num);

/*----------------------------------------------------------------------------
 *   名前   : send
 *   戻り値 : なし
 *   引数   : int num  リンク番号
              int res  レスポンス
 *   解説   : サーバがリンクにレスポンスを送る。
 */
public void send(int num,int res);

/*----------------------------------------------------------------------------
 *   名前   : sndrec
 *   戻り値 : int レスポンス
 *   引数   : int num    リンク番号
              int op     メッセージの種類
              int prm1-3 メッセージのデータ
 *   解説   : クライアントがリンクを介してリクエストとレスポンスを送受信
 */
public int sndrec(int num,int op,int prm1,int prm2,int prm3);

/*----------------------------------------------------------------------------
 *  名前   : sleep
 *  戻り値 : 0:正常, <0:エラー
 *  引数   : int ms  スリープ時間(ms単位)
 *  解説   : 時間を指定してプロセスをスリープさせる。時間の単位は ms である。
 */
public int sleep(int ms);


